[tool.poetry]
name = "connectors"
version = "0.1.0"
description = "Metamorph connectors to external data sources"
authors = ["The Andesite Team"]
readme = "README.md"
packages = [
    { include = "connectors" },
    { include = "connectors/py.typed" }
]

[tool.poetry.dependencies]
python = "~3.12"
common = { path = "../common", develop = true }
boto3 = "^1.34.107"
boto3-stubs = "^1.34.107"
pydantic-settings = "^2.1.0"
toml = "^0.10.2"
starlette = "0.40.0"
motor = "^3.4.0"
motor-stubs = "^1.7.1"
splunk-sdk = "^2.0.1"
cachetools = "^5.3.3"
types-toml = "^0.10.8.20240310"
types-cachetools = "^5.3.0.7"
sse-starlette = "^2.1.0"
tqdm = "^4.66.4"
types-tqdm = "^4.66.0.20240417"
opentelemetry-api = "^1.27.0"
opentelemetry-sdk = "^1.27.0"
opentelemetry-exporter-otlp = "^1.27.0"
opentelemetry-instrumentation-fastapi = "^0.48b0"
redis = "^5.0.7"
opentelemetry-resourcedetector-docker = "^0.4.0"
opentelemetry-resourcedetector-kubernetes = "^0.3.0"
types-pyyaml = "^6.0.12.20240311"
pandas-stubs = "^2.2.2.240909"
domaintools-api = "^2.2.0"
elasticsearch = "^8.17.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.14.1"
ruff = "^0.7.4"
isort = "^5.13.2"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.7"
mongomock-motor = "^0.0.30"
setuptools = "^70.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
include = [
    "connectors/sentinel_one/**.py"
]
exclude = [
    "connectors/athena/**/*.py",
    "connectors/dataset_descriptions/**/*.py",
    "connectors/dataset_structures/**/*.py",
    "connectors/domaintools/**/*.py",
    "connectors/equinox/**.py",
    "connectors/splunk/**.py",
    "connectors/tenable/**.py",
    "connectors/util/**.py",
    "connectors/*.py",
    "tests/dataset_descriptions/**.py",
    "tests/dataset_structures/**.py",
    "tests/equinox/**.py",
    "tests/events/**.py",
    "tests/tenable/**.py",
    "tests/splunk/**.py"
]
line-length = 120

[tool.ruff.lint]
select = [
    "E",    # pycodestyle
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
]
unfixable = [
    "ERA",  # do not autoremove commented out code
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []
