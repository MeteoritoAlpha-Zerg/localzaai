[project]
name = "common"
version = "1.4.0+396a75dbd"
description = "Common utilities package for Metamorph"
authors = [{name = "The Andesite Team"}]
readme = "README.md"
requires-python = ">=3.12, <3.13"
dependencies = [
    "core",
    "connectors",
    "pydantic>=2.7.1",
    "boto3>=1.34.107",
    "boto3-stubs>=1.34.107",
    "pydantic-settings>=2.2.1",
    "starlette==0.40.0",
    "motor==3.6.*",
    "motor-stubs>=1.7.1",
    "splunk-sdk>=2.0.1",
    "opentelemetry-api>=1.27.0",
    "opentelemetry-sdk>=1.27.0",
    "opentelemetry-exporter-otlp>=1.27.0",
    "opentelemetry-instrumentation-fastapi>=0.48b0",
    "redis>=5.0.7",
    "celery>=5.4.0",
    "clamd>=1.0.2",
    "croniter>=3.0.3",
    "pymongo (>=4.9.0,<5.0.0)",
    "pymilvus (>=2.5.10,<3.0.0)",
]

[tool.poetry]
packages = [
    { include = "common" },
    { include = "common/py.typed" }
]

[tool.poetry.dependencies]
core = { path = "../core", develop = true }
connectors = { path = "../connectors", develop = true }

[project.optional-dependencies]
dev = [
    "mypy>=1.14.1",
    "ruff>=0.7.4",
    "isort>=5.13.2",
    "pytest>=8.2.2",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.7",
    "mongomock-motor>=0.0.30",
    "setuptools>=70.2.0",
]

[tool.ruff]
line-length = 120
exclude = [
    "notebooks/*",
    ".venv",
    "venv"
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
]
unfixable = [
    "ERA",  # do not autoremove commented out code
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "common/clients/*",
    "common/models/*",
]
