# Cortex XSIAM
name: "cortex_xsiam"
category: "Security Operations"
description: "Create an API integration with Cortex XSIAM for security data ingestion and analysis"

specs:
  - description: |
      The Cortex XSIAM Connector is able to authenticate with Cortex XSIAM APIs per its implementation in the code 
      environment only
    preconditions: |
      Valid Cortex XSIAM API key and API key ID are required for authentication
    postconditions: |
      The Cortex XSIAM connector is able to authenticate properly with Cortex XSIAM APIs using API key authentication;
      The Cortex XSIAM connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Cortex XSIAM Connector is able to list available data sources per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Cortex XSIAM APIs
    postconditions: |
      Connector successfully enumerates available data sources (incidents, alerts, logs, investigations, playbooks) 
      to populate the target options of the CortexXSIAMTarget;

  - description: |
      Cortex XSIAM Connector is able to retrieve security incidents and alert data
    preconditions: |
      A valid authenticated session with Cortex XSIAM APIs
    postconditions: |
      Per the configuration as contained in CortexXSIAMTarget as provided to CortexXSIAMConnectorTools, it is possible
      to get security incidents including alert correlations, severity levels, investigation status, and response actions;
      Ensure that the respective get_cortex_xsiam_incidents function in the CortexXSIAMConnectorTools is not hardcoding
      any return values;

  - description: |
      Cortex XSIAM Connector is able to retrieve security logs and event data
    preconditions: |
      A valid authenticated session with Cortex XSIAM APIs
    postconditions: |
      Connector successfully retrieves security logs including event data, log sources, timestamps,
      and normalized security event information;

  - description: |
      Cortex XSIAM Connector is able to retrieve investigation and automation data
    preconditions: |
      A valid authenticated session with Cortex XSIAM APIs
    postconditions: |
      Connector successfully retrieves investigation data including playbook executions, automation workflows,
      investigation timelines, and response orchestration data with contextual analysis

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Cortex XSIAM data sources
    preconditions: |
      Valid Cortex XSIAM API credentials
    postconditions: |
      Possible to retrieve the list of Cortex XSIAM data sources using get_query_target_options
      and to then use this to set the options in a given CortexXSIAMConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real data sources, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      Retrieve Cortex XSIAM security incidents and alert data
    preconditions: |
      Valid Cortex XSIAM API credentials
    postconditions: |
      Possible to retrieve security incidents by way of connector tools;
      This list includes incident details, alert correlations, and investigation status; 
      These must be real incident data, and not simulated;
    function_to_run: !python/file 4-test_get_incidents.py

  - description: |
      Retrieve Cortex XSIAM security logs and event data
    preconditions: |
      Valid Cortex XSIAM API credentials
    postconditions: |
      Possible to retrieve security logs including event data and log sources;
      This list includes log entries, timestamps, and normalized event information; 
      These must be real log data, and not simulated;
    function_to_run: !python/file 5-test_get_logs.py

  - description: |
      Retrieve Cortex XSIAM investigation and automation data
    preconditions: |
      Valid Cortex XSIAM API credentials
    postconditions: |
      Possible to retrieve investigation and automation data including playbooks and workflows;
      This list includes investigation timelines, playbook executions, and response actions; 
      These must be real investigation data, and not simulated;
    function_to_run: !python/file 6-test_get_investigations.py

connector_references: 
  - description: "Cortex XSIAM logo"
    file_path: "assets/cortex_xsiam.png"
    environment_path: "connectors/cortex_xsiam/cortex_xsiam.png"
    format: "png"
    required: true
    read_only: true

user_references: []

configs:
  - name: "cortex_xsiam_api_url"
    description: "The base URL for Cortex XSIAM APIs, note this should be included as api_url in CortexXSIAMConnectorConfig"
    value: !env/var

  - name: "cortex_xsiam_api_key"
    description: "API Key for authenticating with Cortex XSIAM APIs, note this should be included as api_key in CortexXSIAMConnectorConfig"
    value: !env/var

  - name: "cortex_xsiam_api_key_id"
    description: "API Key ID for authenticating with Cortex XSIAM APIs, note this should be included as api_key_id in CortexXSIAMConnectorConfig"
    value: !env/var

  - name: "cortex_xsiam_tenant_id"
    description: "Tenant ID for Cortex XSIAM multi-tenant access, note this should be included as tenant_id in CortexXSIAMConnectorConfig"
    value: !env/var

  - name: "cortex_xsiam_api_request_timeout"
    description: "Request timeout in seconds"
    value: 60

  - name: "cortex_xsiam_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "cortex_xsiam_default_limit"
    description: "Default limit for API response pagination"
    value: 100

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Cortex XSIAM connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "CortexXSIAMConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which data sources are valid for the target, and then use the target to select which sources to actually pull data from for the respective tools as shown in the unit tests",
      "Cortex XSIAM APIs require proper API key and API key ID authentication in headers",
      "implement proper rate limiting and pagination handling for large datasets",
      "handle different data types (incidents, alerts, logs, investigations, playbooks) appropriately",
      "support Cortex XSIAM's advanced authentication with timestamp and signature generation",
      "handle Cortex XSIAM's specific response formats and error codes properly",
      "support multi-tenant environments with proper tenant ID handling",
      "implement proper handling of Cortex XSIAM's security orchestration and automation features"
    ]
# !Cortex XSIAM