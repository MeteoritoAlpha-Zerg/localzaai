# Microsoft Sentinel
name: "microsoft_sentinel"
category: "Security Information and Event Management (SIEM)"
description: "Create an API integration with Microsoft Sentinel per its API specification"

specs:
  - description: |
      The Microsoft Sentinel Connector is able to authenticate with Microsoft Sentinel per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The Microsoft Sentinel connector is able to authenticate properly with a Microsoft Sentinel instance;
      The Microsoft Sentinel connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Microsoft Sentinel Connector is able to list Microsoft Sentinel workspaces per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Microsoft Sentinel
    postconditions: |
      Connector successfully enumerates workspaces to populate the target options of the MicrosoftSentinelTarget;

  - description: |
      Microsoft Sentinel Connector is able to list workspace information
    preconditions: |
      A valid authenticated session with Microsoft Sentinel
    postconditions: |
      Per the configuration as contained in MicrosoftSentinelTarget as provided to MicrosoftSentinelConnectorTools, it is possible
      to get a list of workspaces along with their respective description and other relevant workspace details
      as may be relevant;
      Ensure that the respective get_microsoft_sentinel_workspaces function in the MicrosoftSentinelConnectorTools is not hardcoding
      any return values;

  - description: |
      Microsoft Sentinel Connector is able to execute KQL queries in a selected workspace
    preconditions: |
      A valid authenticated session with Microsoft Sentinel
    postconditions: |
      Connector successfully executes KQL queries for the selected workspace provided as a param
      to the execute KQL query tool

  - description: |
      Microsoft Sentinel Connector is able to list incidents in a selected workspace
    preconditions: |
      A valid authenticated session with Microsoft Sentinel
    postconditions: |
      Connector successfully lists incidents for the selected workspace provided as a param
      to the list incidents tool

  - description: |
      Microsoft Sentinel Connector is able to ingest data into a selected workspace
    preconditions: |
      A valid authenticated session with Microsoft Sentinel
    postconditions: |
      Connector successfully ingests data into the selected workspace provided as a param
      to the ingest data tool

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Microsoft Sentinel workspaces
    preconditions: |
      An existing Microsoft Sentinel API credentials and authentication
    postconditions: |
      Possible to retrieve the list of Microsoft Sentinel workspaces using get_query_target_options
      and to then use this to set the options in a given MicrosoftSentinelConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real workspaces, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List Microsoft Sentinel workspaces for selected Microsoft Sentinel workspaces in target
    preconditions: |
      An existing Microsoft Sentinel API credentials and authentication
    postconditions: |
      Possible to retrieve the list of Microsoft Sentinel workspaces by way of connector tools;
      This list includes details of the workspaces to be listed in results; 
      These must be real workspaces, and not simulated;
    function_to_run: !python/file 4-test_list_workspaces.py

  - description: |
      Execute KQL query for selected Microsoft Sentinel workspace passed as param
    preconditions: |
      An existing Microsoft Sentinel API credentials and authentication
    postconditions: |
      Possible to execute a KQL query for the selected Microsoft Sentinel workspace as passed as a param to the connector tools;
      This query execution only targets the specified workspace to be used in results; 
      These must be real query results, and not simulated;
    function_to_run: !python/file 5-test_execute_kql_query.py

  - description: |
      Retrieve incidents for selected Microsoft Sentinel workspace passed as param
    preconditions: |
      An existing Microsoft Sentinel API credentials and authentication
    postconditions: |
      Possible to retrieve a set of incidents for the selected Microsoft Sentinel workspace as passed as a param to the connector tools;
      This list only includes incidents of the target workspace to be listed in results; 
      These must be real incidents, and not simulated;
    function_to_run: !python/file 6-test_get_incidents.py

  - description: |
      Ingest data into selected Microsoft Sentinel workspace passed as param
    preconditions: |
      An existing Microsoft Sentinel API credentials and authentication
    postconditions: |
      Possible to ingest data into the selected Microsoft Sentinel workspace as passed as a param to the connector tools;
      This data ingestion only targets the specified workspace to be used in results; 
      The ingestion must be real, and not simulated;
    function_to_run: !python/file 7-test_ingest_data.py

connector_references: 
  - description: "Microsoft Sentinel logo"
    file_path: "assets/microsoft_sentinel.png"
    environment_path: "connectors/microsoft_sentinel/microsoft_sentinel.png"
    format: "png"
    required: true
    read_only: true

user_references: []

configs:
  - name: "azure_tenant_id"
    description: "Azure Active Directory tenant ID, note this should be included as tenant_id in MicrosoftSentinelConnectorConfig"
    value: !env/var 

  - name: "client_id"
    description: "Azure AD application client ID, note this should be included as client_id in MicrosoftSentinelConnectorConfig"
    value: !env/var 

  - name: "client_secret"
    description: "Azure AD application client secret, note this should be included as client_secret in MicrosoftSentinelConnectorConfig"
    value: !env/var 

  - name: "subscription_id"
    description: "Azure subscription ID, note this should be included as subscription_id in MicrosoftSentinelConnectorConfig"
    value: !env/var 

  - name: "resource_group"
    description: "Azure resource group name, note this should be included as resource_group in MicrosoftSentinelConnectorConfig"
    value: !env/var 

  - name: "api_base_url"
    description: "Base URL for Microsoft Sentinel API"
    value: "https://management.azure.com"

  - name: "api_version"
    description: "Microsoft Sentinel API version"
    value: "2021-10-01"

  - name: "api_request_timeout"
    description: "Request timeout in seconds"
    value: 30

  - name: "api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "retry_delay"
    description: "Initial delay in seconds between retries (will increase with backoff)"
    value: 2
  
  - name: "query_timeout_minutes"
    description: "Timeout in minutes for KQL query execution"
    value: 10

  - name: "max_incidents_per_page"
    description: "Maximum number of incidents to retrieve per page"
    value: 50

  - name: "log_type"
    description: "Custom log type for data ingestion"
    value: "CustomSecurityLogs_CL"

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Microsoft Sentinel connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "MicrosoftSentinelConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which workspaces are valid for the target, and then use the target to select which workspaces to actually pull data from for the respective tools as shown in the unit tests",
      "support for KQL query execution against Log Analytics workspaces",
      "handle Azure AD authentication and token management correctly",
      "implement proper retry logic for rate limited API requests",
      "utilize exponential backoff for retries to respect Azure API guidelines",
      "handle pagination for large data sets such as incidents and query results",
      "support both synchronous and asynchronous KQL query execution modes",
      "ensure proper error handling for Microsoft Sentinel-specific error responses",
      "consider Azure API throttling limits when designing batch operations",
      "implement proper logging for debugging and troubleshooting purposes",
      "support custom log data ingestion for security event forwarding",
      "handle workspace-specific operations through proper target configuration"
    ]
# !Microsoft Sentinel