# 6-test_vulnerability_assessment.py

async def test_vulnerability_assessment(zerg_state=None):
    """Test Xpanse vulnerability assessment retrieval by way of connector tools"""
    print("Attempting to authenticate using Xpanse connector")

    assert zerg_state, "this test requires valid zerg_state"

    # Config setup
    xpanse_api_url = zerg_state.get("xpanse_api_url").get("value")
    xpanse_api_key = zerg_state.get("xpanse_api_key").get("value")
    xpanse_api_key_id = zerg_state.get("xpanse_api_key_id").get("value")
    xpanse_tenant_id = zerg_state.get("xpanse_tenant_id").get("value")
    xpanse_api_version = zerg_state.get("xpanse_api_version").get("value")

    from connectors.xpanse.config import XpanseConnectorConfig
    from connectors.xpanse.connector import XpanseConnector
    from connectors.xpanse.target import XpanseTarget
    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface

    config = XpanseConnectorConfig(
        api_url=xpanse_api_url, api_key=xpanse_api_key, api_key_id=xpanse_api_key_id,
        tenant_id=xpanse_tenant_id, api_version=xpanse_api_version
    )

    connector = XpanseConnector
    await connector.initialize(config=config, user_id="test_user_id", encryption_key="test_enc_key")

    target = XpanseTarget(risk_categories=["high_risk", "critical_risk"])
    tools = await connector.get_tools(target=target)
    get_vulnerabilities_tool = next(tool for tool in tools if tool.name == "get_xpanse_vulnerabilities")
    vulnerabilities_result = await get_vulnerabilities_tool.execute(risk_threshold=50)
    xpanse_vulnerabilities = vulnerabilities_result.result

    # Validate results
    assert isinstance(xpanse_vulnerabilities, list), "xpanse_vulnerabilities should be a list"
    assert len(xpanse_vulnerabilities) > 0, "xpanse_vulnerabilities should not be empty"

    for vuln in xpanse_vulnerabilities[:3]:  # Check first 3 vulnerabilities
        assert "vulnerability_id" in vuln, "Each vulnerability should have a 'vulnerability_id' field"
        assert "risk_score" in vuln, "Each vulnerability should have a 'risk_score' field"
        assert "severity" in vuln, "Each vulnerability should have a 'severity' field"
        
        # Validate risk score range
        risk_score = vuln["risk_score"]
        assert isinstance(risk_score, (int, float)), "Risk score should be numeric"
        assert 0 <= risk_score <= 100, f"Risk score should be 0-100: {risk_score}"
        
        # Check for CVE and remediation fields
        vuln_fields = ["cve_id", "affected_assets", "remediation_priority"]
        present_fields = [field for field in vuln_fields if field in vuln]
        print(f"Vulnerability {vuln['vulnerability_id']} contains: {', '.join(present_fields)}")

    print(f"Successfully retrieved {len(xpanse_vulnerabilities)} Xpanse vulnerabilities")
    return True