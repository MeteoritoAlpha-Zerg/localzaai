# Claroty
name: "claroty"
category: "OT/ICS Security"
description: "Create an API integration with Claroty to ingest, analyze, and process OT/ICS asset visibility data, network security threats, and risk management insights"

specs:
  - description: |
      The Claroty Connector is able to authenticate with Claroty per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The Claroty connector is able to authenticate properly with a Claroty instance;
      The Claroty connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Claroty Connector is able to list available asset types and security zones per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Claroty
    postconditions: |
      Connector successfully enumerates available asset types, security zones, and network segments to populate the target options of the ClarotyTarget;

  - description: |
      Claroty Connector is able to retrieve OT/ICS asset inventory and visibility data
    preconditions: |
      A valid authenticated session with Claroty
    postconditions: |
      Per the configuration as contained in ClarotyTarget as provided to ClarotyConnectorTools, it is possible
      to get a comprehensive list of OT/ICS assets including device details, network information, firmware versions,
      and operational status as may be relevant;
      Ensure that the respective get_claroty_assets function in the ClarotyConnectorTools is not hardcoding
      any return values;

  - description: |
      Claroty Connector is able to retrieve security alerts and threat detection data
    preconditions: |
      A valid authenticated session with Claroty
    postconditions: |
      Connector successfully retrieves security alerts, threat detections, and anomaly reports for the monitored
      OT/ICS environment with detailed context and severity information;

  - description: |
      Claroty Connector is able to retrieve vulnerability assessments and risk data
    preconditions: |
      A valid authenticated session with Claroty
    postconditions: |
      Connector successfully retrieves vulnerability assessments, CVE mappings, risk scores, and remediation
      recommendations for OT/ICS assets and infrastructure;

  - description: |
      Claroty Connector is able to retrieve network topology and communication patterns
    preconditions: |
      A valid authenticated session with Claroty
    postconditions: |
      Connector successfully retrieves network topology maps, communication flows, protocol analysis,
      and network segmentation data for the OT/ICS environment;

  - description: |
      Claroty Connector is able to retrieve compliance and governance reports
    preconditions: |
      A valid authenticated session with Claroty
    postconditions: |
      Connector successfully retrieves compliance status, regulatory adherence reports, and governance
      metrics for OT/ICS security standards and frameworks;

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Claroty asset types and security zones
    preconditions: |
      An existing Claroty API credentials and server access
    postconditions: |
      Possible to retrieve the list of available Claroty asset types, security zones, and network segments using get_query_target_options
      and to then use this to set the options in a given ClarotyConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real asset types and zones, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      Retrieve OT/ICS asset inventory for selected asset types and zones
    preconditions: |
      An existing Claroty API credentials and server access
    postconditions: |
      Possible to retrieve the comprehensive OT/ICS asset inventory by way of connector tools;
      This inventory includes detailed asset information, device specifications, and operational data; 
      These must be real assets, and not simulated;
    function_to_run: !python/file 4-test_asset_inventory.py

  - description: |
      Retrieve security alerts and threat detection data
    preconditions: |
      An existing Claroty API credentials and server access
    postconditions: |
      Possible to retrieve security alerts, threat detections, and anomaly reports passed to the connector tools;
      This data includes detailed threat context, severity levels, and affected assets; 
      These must be real security data, and not simulated;
    function_to_run: !python/file 5-test_security_alerts.py

  - description: |
      Retrieve vulnerability assessments and risk analysis
    preconditions: |
      An existing Claroty API credentials and server access
    postconditions: |
      Possible to retrieve vulnerability assessments, CVE data, and risk analysis passed to the connector tools;
      This information includes comprehensive vulnerability details, risk scores, and remediation guidance; 
      These must be real vulnerability data, and not simulated;
    function_to_run: !python/file 6-test_vulnerability_assessment.py

  - description: |
      Retrieve network topology and communication analysis
    preconditions: |
      An existing Claroty API credentials and server access
    postconditions: |
      Possible to retrieve network topology, communication flows, and protocol analysis passed to the connector tools;
      This data includes detailed network maps, traffic patterns, and protocol insights; 
      These must be real network data, and not simulated;
    function_to_run: !python/file 7-test_network_topology.py

  - description: |
      Retrieve compliance and governance reporting data
    preconditions: |
      An existing Claroty API credentials and server access
    postconditions: |
      Possible to retrieve compliance reports, regulatory status, and governance metrics passed to the connector tools;
      This information includes detailed compliance assessments and regulatory adherence data; 
      These must be real compliance data, and not simulated;
    function_to_run: !python/file 8-test_compliance_reports.py

connector_references: 
  - description: "Claroty logo"
    file_path: "assets/claroty.png"
    environment_path: "connectors/claroty/claroty.png"
    format: "png"
    required: true
    read_only: true

user_references: []

configs:
  - name: "claroty_server_url"
    description: "The base URL of the Claroty server instance, note this should be included as server_url in ClarotyConnectorConfig"
    value: !env/var 

  - name: "claroty_api_token"
    description: "API Token for authenticating with Claroty, note this should be included as api_token in ClarotyConnectorConfig"
    value: !env/var 

  - name: "claroty_username"
    description: "Username for authenticating with Claroty, note this should be included as username in ClarotyConnectorConfig"
    value: !env/var 

  - name: "claroty_password"
    description: "Password for authenticating with Claroty, note this should be included as password in ClarotyConnectorConfig"
    value: !env/var 

  - name: "claroty_api_version"
    description: "Claroty API version to use (defaults to v2.0)"
    value: "v2.0"

  - name: "claroty_api_request_timeout"
    description: "Request timeout in seconds"
    value: 60

  - name: "claroty_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "claroty_default_page_size"
    description: "Default number of results to return per page"
    value: 100

  - name: "claroty_max_pages"
    description: "Maximum number of pages to retrieve for paginated results"
    value: 20

  - name: "claroty_asset_sync_interval"
    description: "Asset synchronization interval in minutes"
    value: 60

  - name: "claroty_alert_severity_filter"
    description: "Minimum alert severity level to retrieve (Low, Medium, High, Critical)"
    value: "Medium"

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Claroty connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "ClarotyConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which asset types and security zones are valid for the target, and then use the target to select which assets to actually pull data from for the respective tools as shown in the unit tests",
      "implement proper pagination handling for large asset inventories and security data as Claroty API returns paginated responses",
      "handle rate limiting gracefully as Claroty API has usage quotas and performance considerations for OT environments",
      "support filtering by asset types, security zones, network segments, and time ranges for efficient data retrieval",
      "provide meaningful error messages when API quota is exceeded, authentication fails, or OT network connectivity issues occur",
      "implement caching mechanisms for asset data to reduce API calls and improve performance in OT environments",
      "ensure proper handling of real-time alerts and threat detection data with appropriate timestamps and correlation",
      "support both polling and webhook-based data ingestion patterns for different Claroty deployment scenarios",
      "maintain data integrity and consistency when processing large volumes of OT/ICS asset and security data"
    ]
# !Claroty