# Tanium
name: "tanium"
category: "Endpoint Management & Security"
description: "Create an API integration with Tanium to ingest, analyze, and process endpoint security data, threat intelligence, and IT operations insights"

specs:
  - description: |
      The Tanium Connector is able to authenticate with Tanium per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The Tanium connector is able to authenticate properly with a Tanium instance;
      The Tanium connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Tanium Connector is able to list Tanium computer groups and sensors per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Tanium
    postconditions: |
      Connector successfully enumerates computer groups and sensors to populate the target options of the TaniumTarget;

  - description: |
      Tanium Connector is able to retrieve computer group and sensor information
    preconditions: |
      A valid authenticated session with Tanium
    postconditions: |
      Per the configuration as contained in TaniumTarget as provided to TaniumConnectorTools, it is possible
      to get a list of computer groups and sensors along with their respective metadata and other relevant details
      as may be relevant for endpoint management and security analysis;
      Ensure that the respective get_tanium_computer_groups function in the TaniumConnectorTools is not hardcoding
      any return values;

  - description: |
      Tanium Connector is able to execute questions and retrieve endpoint data from selected computer groups
    preconditions: |
      A valid authenticated session with Tanium
    postconditions: |
      Connector successfully executes Tanium questions for the selected computer groups provided as params
      to the question tool, supporting endpoint security analysis and IT operations insights

  - description: |
      Tanium Connector is able to retrieve threat intelligence and security findings from Tanium modules
    preconditions: |
      A valid authenticated session with Tanium
    postconditions: |
      Connector successfully retrieves threat intelligence findings and security data from Tanium security modules

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Tanium computer groups and sensors
    preconditions: |
      An existing Tanium instance with valid API credentials
    postconditions: |
      Possible to retrieve the list of Tanium computer groups and sensors using get_query_target_options
      and to then use this to set the options in a given TaniumConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real computer groups and sensors, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List Tanium computer groups and sensors for selected targets
    preconditions: |
      An existing Tanium instance with valid API credentials
    postconditions: |
      Possible to retrieve the list of Tanium computer groups and sensors by way of connector tools;
      This list includes details of the computer groups and sensors including metadata and configurations; 
      These must be real computer groups and sensors, and not simulated;
    function_to_run: !python/file 4-test_list_computer_groups.py

  - description: |
      Execute Tanium questions and retrieve endpoint data from selected computer groups
    preconditions: |
      An existing Tanium instance with valid API credentials
    postconditions: |
      Possible to execute Tanium questions for the selected computer groups as passed as params to the connector tools;
      This list includes endpoint data and results from the executed questions; 
      These must be real question results, and not simulated;
    function_to_run: !python/file 5-test_question_execution.py

  - description: |
      Retrieve threat intelligence and security findings from Tanium security modules
    preconditions: |
      An existing Tanium instance with valid API credentials and security modules
    postconditions: |
      Possible to retrieve threat intelligence and security findings from Tanium security modules;
      This includes threat detection data and security insights for analysis; 
      These must be real security findings, and not simulated;
    function_to_run: !python/file 6-test_threat_intelligence.py

connector_references: 
  - description: "Tanium SVG logo"
    file_path: "assets/tanium.svg"
    environment_path: "connectors/tanium/tanium.svg"
    format: "svg"
    required: true
    read_only: true

user_references: []

configs:
  - name: "tanium_url"
    description: "The base URL of the Tanium instance, note this should be included as url in TaniumConnectorConfig"
    value: !env/var 

  - name: "tanium_username"
    description: "Username for authenticating with Tanium API, note this should be included as username in TaniumConnectorConfig"
    value: !env/var 

  - name: "tanium_password"
    description: "Password for authenticating with Tanium API, note this should be included as password in TaniumConnectorConfig"
    value: !env/var

  - name: "tanium_domain"
    description: "Domain for Tanium authentication (optional), note this should be included as domain in TaniumConnectorConfig"
    value: !env/var

  - name: "tanium_api_token"
    description: "API token for authenticating with Tanium API (alternative to username/password), note this should be included as api_token in TaniumConnectorConfig"
    value: !env/var

  - name: "tanium_api_request_timeout"
    description: "Request timeout in seconds"
    value: 60

  - name: "tanium_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "tanium_verify_ssl"
    description: "Whether to verify SSL certificates"
    value: true

  - name: "tanium_question_timeout"
    description: "Timeout for Tanium question execution in seconds"
    value: 300

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Tanium connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "TaniumConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which computer groups and sensors are valid for the target, and then use the target to select which computer groups and sensors to actually pull data from for the respective tools as shown in the unit tests",
      "support both username/password and API token authentication methods",
      "handle session management appropriately for Tanium API interactions",
      "support Tanium question execution with proper timeout handling",
      "integrate with Tanium security modules like Threat Response, IOC Detection, and Detect"
    ]
# !Tanium