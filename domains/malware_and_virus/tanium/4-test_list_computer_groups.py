# 4-test_list_computer_groups.py

async def test_list_computer_groups(zerg_state=None):
    """Test Tanium computer group and sensor enumeration by way of connector tools"""
    print("Attempting to authenticate using Tanium connector")

    assert zerg_state, "this test requires valid zerg_state"

    tanium_url = zerg_state.get("tanium_url").get("value")
    tanium_username = zerg_state.get("tanium_username", {}).get("value")
    tanium_password = zerg_state.get("tanium_password", {}).get("value")
    tanium_domain = zerg_state.get("tanium_domain", {}).get("value")
    tanium_api_token = zerg_state.get("tanium_api_token", {}).get("value")

    from connectors.tanium.config import TaniumConnectorConfig
    from connectors.tanium.connector import TaniumConnector
    from connectors.tanium.tools import TaniumConnectorTools
    from connectors.tanium.target import TaniumTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config - prefer API token over username/password
    if tanium_api_token:
        config = TaniumConnectorConfig(
            url=tanium_url,
            api_token=tanium_api_token,
        )
    elif tanium_username and tanium_password:
        config = TaniumConnectorConfig(
            url=tanium_url,
            username=tanium_username,
            password=tanium_password,
            domain=tanium_domain,  # domain is optional
        )
    else:
        raise Exception("Either tanium_api_token or both tanium_username and tanium_password must be provided")

    assert isinstance(config, ConnectorConfig), "TaniumConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = TaniumConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TaniumConnector should be of type Connector"

    # get query target options
    tanium_query_target_options = await connector.get_query_target_options()
    assert isinstance(tanium_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select computer groups to target
    computer_group_selector = None
    for selector in tanium_query_target_options.selectors:
        if selector.type == 'computer_group_ids':  
            computer_group_selector = selector
            break

    assert computer_group_selector, "failed to retrieve computer group selector from query target options"

    # grab the first two computer groups 
    num_groups = 2
    assert isinstance(computer_group_selector.values, list), "computer_group_selector values must be a list"
    computer_group_ids = computer_group_selector.values[:num_groups] if computer_group_selector.values else None
    print(f"Selecting computer group IDs: {computer_group_ids}")

    assert computer_group_ids, f"failed to retrieve {num_groups} computer group IDs from computer group selector"

    # set up the target with computer group IDs
    target = TaniumTarget(computer_group_ids=computer_group_ids)
    assert isinstance(target, ConnectorTargetInterface), "TaniumTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_tanium_computer_groups tool
    tanium_get_groups_tool = next(tool for tool in tools if tool.name == "get_tanium_computer_groups")
    tanium_groups_result = await tanium_get_groups_tool.execute()
    tanium_groups = tanium_groups_result.result

    print("Type of returned tanium_groups:", type(tanium_groups))
    print(f"len computer groups: {len(tanium_groups)} groups: {str(tanium_groups)[:200]}")

    # Verify that tanium_groups is a list
    assert isinstance(tanium_groups, list), "tanium_groups should be a list"
    assert len(tanium_groups) > 0, "tanium_groups should not be empty"
    assert len(tanium_groups) == num_groups, f"tanium_groups should have {num_groups} entries"
    
    # Verify structure of each computer group object
    for group in tanium_groups:
        assert "id" in group, "Each computer group should have an 'id' field"
        assert group["id"] in computer_group_ids, f"Computer group ID {group['id']} is not in the requested computer_group_ids"
        
        # Verify essential Tanium computer group fields
        assert "name" in group, "Each computer group should have a 'name' field"
        assert "text" in group, "Each computer group should have a 'text' field"
        
        # Check for additional descriptive fields
        descriptive_fields = ["creation_time", "modification_time", "saved_question_id", "management_rights_list", "filter_flag"]
        present_fields = [field for field in descriptive_fields if field in group]
        
        print(f"Computer group {group['name']} contains these descriptive fields: {', '.join(present_fields)}")
        
        # Log the full structure of the first group
        if group == tanium_groups[0]:
            print(f"Example computer group structure: {group}")

    print(f"Successfully retrieved and validated {len(tanium_groups)} Tanium computer groups")

    return True