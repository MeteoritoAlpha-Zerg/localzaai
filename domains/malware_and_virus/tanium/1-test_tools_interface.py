# 1-test_tools_interface.py

async def test_tools_interface(zerg_state=None):
    """Test whether connector returns a valid list of tools"""
    print("Testing connector tools interfaces")

    assert zerg_state, "this test requires valid zerg_state"

    tanium_url = zerg_state.get("tanium_url").get("value")
    tanium_username = zerg_state.get("tanium_username", {}).get("value")
    tanium_password = zerg_state.get("tanium_password", {}).get("value")
    tanium_domain = zerg_state.get("tanium_domain", {}).get("value")
    tanium_api_token = zerg_state.get("tanium_api_token", {}).get("value")

    from connectors.tanium.config import TaniumConnectorConfig
    from connectors.tanium.connector import TaniumConnector
    from connectors.tanium.target import TaniumTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface

    # Note this is common code
    from common.models.tool import Tool

    # initialize the connector config - prefer API token over username/password
    if tanium_api_token:
        config = TaniumConnectorConfig(
            url=tanium_url,
            api_token=tanium_api_token,
        )
    elif tanium_username and tanium_password:
        config = TaniumConnectorConfig(
            url=tanium_url,
            username=tanium_username,
            password=tanium_password,
            domain=tanium_domain,  # domain is optional
        )
    else:
        raise Exception("Either tanium_api_token or both tanium_username and tanium_password must be provided")

    assert isinstance(config, ConnectorConfig), "TaniumConnectorConfig should be of type ConnectorConfig"

    # initialize the connector
    connector = TaniumConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TaniumConnector should be of type Connector"

    target = TaniumTarget()
    assert isinstance(target, ConnectorTargetInterface), "TaniumTarget should be of type ConnectorTargetInterface"

    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"
    
    for tool in tools:
        assert isinstance(tool, Tool), f"Item {tool} is not an instance of Tool"

    return True