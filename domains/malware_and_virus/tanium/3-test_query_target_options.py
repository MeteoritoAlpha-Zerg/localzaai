# 3-test_query_target_options.py

async def test_computer_group_enumeration_options(zerg_state=None):
    """Test Tanium computer group and sensor enumeration by way of query target options"""
    print("Attempting to authenticate using Tanium connector")

    assert zerg_state, "this test requires valid zerg_state"

    tanium_url = zerg_state.get("tanium_url").get("value")
    tanium_username = zerg_state.get("tanium_username", {}).get("value")
    tanium_password = zerg_state.get("tanium_password", {}).get("value")
    tanium_domain = zerg_state.get("tanium_domain", {}).get("value")
    tanium_api_token = zerg_state.get("tanium_api_token", {}).get("value")

    from connectors.tanium.config import TaniumConnectorConfig
    from connectors.tanium.connector import TaniumConnector

    from connectors.config import ConnectorConfig
    from connectors.query_target_options import ConnectorQueryTargetOptions
    from connectors.connector import Connector

    # initialize the connector config - prefer API token over username/password
    if tanium_api_token:
        config = TaniumConnectorConfig(
            url=tanium_url,
            api_token=tanium_api_token,
        )
    elif tanium_username and tanium_password:
        config = TaniumConnectorConfig(
            url=tanium_url,
            username=tanium_username,
            password=tanium_password,
            domain=tanium_domain,  # domain is optional
        )
    else:
        raise Exception("Either tanium_api_token or both tanium_username and tanium_password must be provided")

    assert isinstance(config, ConnectorConfig), "TaniumConnectorConfig should be of type ConnectorConfig"

    connector = TaniumConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TaniumConnector should be of type Connector"

    tanium_query_target_options = await connector.get_query_target_options()
    assert isinstance(tanium_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    assert tanium_query_target_options, "Failed to retrieve query target options"

    print(f"tanium query target option definitions: {tanium_query_target_options.definitions}")
    print(f"tanium query target option selectors: {tanium_query_target_options.selectors}")

    return True