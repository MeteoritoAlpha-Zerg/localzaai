# 5-test_question_execution.py

async def test_question_execution(zerg_state=None):
    """Test Tanium question execution and endpoint data retrieval"""
    print("Attempting to execute questions using Tanium connector")

    assert zerg_state, "this test requires valid zerg_state"

    tanium_url = zerg_state.get("tanium_url").get("value")
    tanium_username = zerg_state.get("tanium_username", {}).get("value")
    tanium_password = zerg_state.get("tanium_password", {}).get("value")
    tanium_domain = zerg_state.get("tanium_domain", {}).get("value")
    tanium_api_token = zerg_state.get("tanium_api_token", {}).get("value")

    from connectors.tanium.config import TaniumConnectorConfig
    from connectors.tanium.connector import TaniumConnector
    from connectors.tanium.tools import TaniumConnectorTools
    from connectors.tanium.target import TaniumTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config - prefer API token over username/password
    if tanium_api_token:
        config = TaniumConnectorConfig(
            url=tanium_url,
            api_token=tanium_api_token,
        )
    elif tanium_username and tanium_password:
        config = TaniumConnectorConfig(
            url=tanium_url,
            username=tanium_username,
            password=tanium_password,
            domain=tanium_domain,  # domain is optional
        )
    else:
        raise Exception("Either tanium_api_token or both tanium_username and tanium_password must be provided")

    assert isinstance(config, ConnectorConfig), "TaniumConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = TaniumConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TaniumConnector should be of type Connector"

    # get query target options
    tanium_query_target_options = await connector.get_query_target_options()
    assert isinstance(tanium_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select computer groups to target
    computer_group_selector = None
    for selector in tanium_query_target_options.selectors:
        if selector.type == 'computer_group_ids':  
            computer_group_selector = selector
            break

    assert computer_group_selector, "failed to retrieve computer group selector from query target options"

    assert isinstance(computer_group_selector.values, list), "computer_group_selector values must be a list"
    computer_group_id = computer_group_selector.values[0] if computer_group_selector.values else None
    print(f"Selecting computer group ID: {computer_group_id}")

    assert computer_group_id, f"failed to retrieve computer group ID from computer group selector"

    # set up the target with computer group IDs
    target = TaniumTarget(computer_group_ids=[computer_group_id])
    assert isinstance(target, ConnectorTargetInterface), "TaniumTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the execute_tanium_question tool and execute it with a basic question
    execute_tanium_question_tool = next(tool for tool in tools if tool.name == "execute_tanium_question")
    
    # Use a basic Tanium question that should work on most systems
    test_question = "Get Computer Name from all machines"
    
    tanium_question_result = await execute_tanium_question_tool.execute(
        question_text=test_question,
        computer_group_id=computer_group_id,
        timeout=120  # 2 minute timeout for testing
    )
    tanium_question_data = tanium_question_result.result

    print("Type of returned tanium_question_data:", type(tanium_question_data))
    print(f"len question results: {len(tanium_question_data)} results: {str(tanium_question_data)[:200]}")

    # Verify that tanium_question_data is a list
    assert isinstance(tanium_question_data, list), "tanium_question_data should be a list"
    assert len(tanium_question_data) > 0, "tanium_question_data should not be empty"
    
    # Limit the number of results to check if there are many
    results_to_check = tanium_question_data[:5] if len(tanium_question_data) > 5 else tanium_question_data
    
    # Verify structure of each question result object
    for result in results_to_check:
        # Verify essential Tanium question result fields
        assert "computer_id" in result, "Each result should have a 'computer_id' field"
        assert "computer_name" in result, "Each result should have a 'computer_name' field"
        assert "data" in result, "Each result should have a 'data' field"
        
        # Verify that data contains the expected information for our question
        data = result["data"]
        assert isinstance(data, dict), "Result data should be a dictionary"
        
        # For "Get Computer Name" question, we expect computer name data
        assert "Computer Name" in data, "Result data should contain 'Computer Name' field"
        
        # Check for additional optional fields
        optional_fields = ["last_seen", "ip_address", "operating_system", "tanium_client_ip"]
        present_optional = [field for field in optional_fields if field in result]
        
        print(f"Result for {result['computer_name']} contains these optional fields: {', '.join(present_optional)}")
        
        # Log the structure of the first result for debugging
        if result == results_to_check[0]:
            print(f"Example question result structure: {result}")

    print(f"Successfully executed Tanium question and validated {len(tanium_question_data)} results")

    # Test getting sensors as well
    get_tanium_sensors_tool = next(tool for tool in tools if tool.name == "get_tanium_sensors")
    tanium_sensors_result = await get_tanium_sensors_tool.execute(limit=10)
    tanium_sensors = tanium_sensors_result.result

    print("Type of returned tanium_sensors:", type(tanium_sensors))
    
    # Verify sensors structure
    assert isinstance(tanium_sensors, list), "tanium_sensors should be a list"
    
    if len(tanium_sensors) > 0:
        # Check first few sensors
        sensors_to_check = tanium_sensors[:3] if len(tanium_sensors) > 3 else tanium_sensors
        
        for sensor in sensors_to_check:
            assert "id" in sensor, "Each sensor should have an 'id' field"
            assert "name" in sensor, "Each sensor should have a 'name' field"
            
            # Check for additional sensor fields
            sensor_fields = ["hash", "category", "creation_time", "modification_time", "value_type"]
            present_sensor_fields = [field for field in sensor_fields if field in sensor]
            
            print(f"Sensor {sensor['name']} contains these fields: {', '.join(present_sensor_fields)}")
        
        print(f"Successfully retrieved and validated {len(tanium_sensors)} Tanium sensors")

    return True