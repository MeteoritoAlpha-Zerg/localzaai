# 5-test_get_endpoints.py

async def test_get_endpoints(zerg_state=None):
    """Test Cortex XDR endpoint information retrieval"""
    print("Testing Cortex XDR endpoint information retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    cortex_xdr_api_url = zerg_state.get("cortex_xdr_api_url").get("value")
    cortex_xdr_api_key = zerg_state.get("cortex_xdr_api_key").get("value")
    cortex_xdr_api_key_id = zerg_state.get("cortex_xdr_api_key_id").get("value")

    from connectors.cortex_xdr.config import CortexXDRConnectorConfig
    from connectors.cortex_xdr.connector import CortexXDRConnector
    from connectors.cortex_xdr.target import CortexXDRTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = CortexXDRConnectorConfig(
        api_url=cortex_xdr_api_url,
        api_key=cortex_xdr_api_key,
        api_key_id=cortex_xdr_api_key_id
    )
    assert isinstance(config, ConnectorConfig), "CortexXDRConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = CortexXDRConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CortexXDRConnector should be of type Connector"

    # get query target options
    cortex_xdr_query_target_options = await connector.get_query_target_options()
    assert isinstance(cortex_xdr_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select endpoints data source
    data_source_selector = None
    for selector in cortex_xdr_query_target_options.selectors:
        if selector.type == 'data_sources':  
            data_source_selector = selector
            break

    assert data_source_selector, "failed to retrieve data source selector from query target options"
    assert isinstance(data_source_selector.values, list), "data_source_selector values must be a list"
    
    # Find endpoints in available data sources
    endpoints_source = None
    for source in data_source_selector.values:
        if 'endpoint' in source.lower():
            endpoints_source = source
            break
    
    assert endpoints_source, "Endpoints data source not found in available options"
    print(f"Selecting endpoints data source: {endpoints_source}")

    # set up the target with endpoints data source
    target = CortexXDRTarget(data_sources=[endpoints_source])
    assert isinstance(target, ConnectorTargetInterface), "CortexXDRTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_cortex_xdr_endpoints tool and execute it
    get_cortex_xdr_endpoints_tool = next(tool for tool in tools if tool.name == "get_cortex_xdr_endpoints")
    endpoints_result = await get_cortex_xdr_endpoints_tool.execute()
    endpoints_data = endpoints_result.result

    print("Type of returned endpoints data:", type(endpoints_data))
    print(f"Endpoints count: {len(endpoints_data)} sample: {str(endpoints_data)[:200]}")

    # Verify that endpoints_data is a list
    assert isinstance(endpoints_data, list), "Endpoints data should be a list"
    assert len(endpoints_data) > 0, "Endpoints data should not be empty"
    
    # Limit the number of endpoints to check if there are many
    endpoints_to_check = endpoints_data[:5] if len(endpoints_data) > 5 else endpoints_data
    
    # Verify structure of each endpoint entry
    for endpoint in endpoints_to_check:
        # Verify essential endpoint fields
        assert "endpoint_id" in endpoint, "Each endpoint should have an 'endpoint_id' field"
        assert "endpoint_name" in endpoint, "Each endpoint should have an 'endpoint_name' field"
        assert "endpoint_status" in endpoint, "Each endpoint should have an 'endpoint_status' field"
        
        # Verify endpoint status is valid
        valid_statuses = ["connected", "disconnected", "lost", "uninstalled"]
        status = endpoint["endpoint_status"].lower()
        assert any(valid_status in status for valid_status in valid_statuses), f"Invalid endpoint status: {status}"
        
        # Verify endpoint name and ID are not empty
        assert endpoint["endpoint_name"].strip(), "Endpoint name should not be empty"
        assert endpoint["endpoint_id"], "Endpoint ID should not be empty"
        
        # Check for additional endpoint fields
        endpoint_fields = ["ip", "os_type", "endpoint_version", "first_seen", "last_seen", "domain", "alias"]
        present_fields = [field for field in endpoint_fields if field in endpoint]
        
        print(f"Endpoint {endpoint['endpoint_name']} ({endpoint['endpoint_status']}) contains: {', '.join(present_fields)}")
        
        # If IP addresses are present, validate basic format
        if "ip" in endpoint:
            ip_addresses = endpoint["ip"]
            if isinstance(ip_addresses, list):
                for ip in ip_addresses:
                    assert isinstance(ip, str), "IP address should be a string"
                    # Basic IP validation (IPv4 or IPv6)
                    assert ('.' in ip and len(ip.split('.')) == 4) or ':' in ip, f"Invalid IP address format: {ip}"
        
        # If OS type is present, validate it's not empty
        if "os_type" in endpoint:
            os_type = endpoint["os_type"]
            assert os_type and os_type.strip(), "OS type should not be empty"
            # Common OS types for Cortex XDR
            valid_os_types = ["windows", "linux", "macos", "android"]
            assert any(valid_os in os_type.lower() for valid_os in valid_os_types), f"Unexpected OS type: {os_type}"
        
        # If endpoint version is present, validate it's not empty
        if "endpoint_version" in endpoint:
            version = endpoint["endpoint_version"]
            assert version and version.strip(), "Endpoint version should not be empty"
        
        # Log the structure of the first endpoint for debugging
        if endpoint == endpoints_to_check[0]:
            print(f"Example endpoint structure: {endpoint}")

    print(f"Successfully retrieved and validated {len(endpoints_data)} Cortex XDR endpoints")

    return True