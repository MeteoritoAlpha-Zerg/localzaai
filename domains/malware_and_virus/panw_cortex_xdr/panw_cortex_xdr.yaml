# Cortex XDR
name: "cortex_xdr"
category: "Endpoint Security"
description: "Create an API integration with Cortex XDR to ingest, analyze, and process endpoint security alerts, threat intelligence, and automated response data"

specs:
  - description: |
      The Cortex XDR Connector is able to authenticate with Cortex XDR APIs per its implementation in the code 
      environment only
    preconditions: |
      Valid Cortex XDR API key and API key ID are required for authentication
    postconditions: |
      The Cortex XDR connector is able to authenticate properly with Cortex XDR APIs using API key authentication;
      The Cortex XDR connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Cortex XDR Connector is able to list available data sources per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Cortex XDR APIs
    postconditions: |
      Connector successfully enumerates available data sources (incidents, alerts, endpoints, threat intelligence) 
      to populate the target options of the CortexXDRTarget;

  - description: |
      Cortex XDR Connector is able to retrieve security incidents and alerts
    preconditions: |
      A valid authenticated session with Cortex XDR APIs
    postconditions: |
      Per the configuration as contained in CortexXDRTarget as provided to CortexXDRConnectorTools, it is possible
      to get security incidents including alert details, severity levels, status, and affected endpoints;
      Ensure that the respective get_cortex_xdr_incidents function in the CortexXDRConnectorTools is not hardcoding
      any return values;

  - description: |
      Cortex XDR Connector is able to retrieve endpoint information and security status
    preconditions: |
      A valid authenticated session with Cortex XDR APIs
    postconditions: |
      Connector successfully retrieves endpoint information including hostnames, IP addresses, operating systems,
      agent status, and security posture data;

  - description: |
      Cortex XDR Connector is able to retrieve threat intelligence and automated response data
    preconditions: |
      A valid authenticated session with Cortex XDR APIs
    postconditions: |
      Connector successfully retrieves threat intelligence including indicators, hunting queries,
      response actions, and remediation data with contextual analysis

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Cortex XDR data sources
    preconditions: |
      Valid Cortex XDR API credentials
    postconditions: |
      Possible to retrieve the list of Cortex XDR data sources using get_query_target_options
      and to then use this to set the options in a given CortexXDRConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real data sources, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      Retrieve Cortex XDR security incidents and alerts
    preconditions: |
      Valid Cortex XDR API credentials
    postconditions: |
      Possible to retrieve security incidents by way of connector tools;
      This list includes incident details, severity levels, and affected endpoints; 
      These must be real incident data, and not simulated;
    function_to_run: !python/file 4-test_get_incidents.py

  - description: |
      Retrieve Cortex XDR endpoint information and security status
    preconditions: |
      Valid Cortex XDR API credentials
    postconditions: |
      Possible to retrieve endpoint information including agent status and security posture;
      This list includes endpoint details, operating systems, and agent information; 
      These must be real endpoint data, and not simulated;
    function_to_run: !python/file 5-test_get_endpoints.py

  - description: |
      Retrieve Cortex XDR threat intelligence and automated response data
    preconditions: |
      Valid Cortex XDR API credentials
    postconditions: |
      Possible to retrieve threat intelligence and response automation data;
      This list includes indicators, hunting queries, and response actions; 
      These must be real threat intelligence data, and not simulated;
    function_to_run: !python/file 6-test_get_threat_intelligence.py

connector_references: 
  - description: "Cortex XDR logo"
    file_path: "assets/cortex_xdr.png"
    environment_path: "connectors/cortex_xdr/cortex_xdr.png"
    format: "png"
    required: true
    read_only: true

user_references: []

configs:
  - name: "cortex_xdr_api_url"
    description: "The base URL for Cortex XDR APIs, note this should be included as api_url in CortexXDRConnectorConfig"
    value: !env/var

  - name: "cortex_xdr_api_key"
    description: "API Key for authenticating with Cortex XDR APIs, note this should be included as api_key in CortexXDRConnectorConfig"
    value: !env/var

  - name: "cortex_xdr_api_key_id"
    description: "API Key ID for authenticating with Cortex XDR APIs, note this should be included as api_key_id in CortexXDRConnectorConfig"
    value: !env/var

  - name: "cortex_xdr_api_request_timeout"
    description: "Request timeout in seconds"
    value: 60

  - name: "cortex_xdr_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "cortex_xdr_default_limit"
    description: "Default limit for API response pagination"
    value: 100

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Cortex XDR connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "CortexXDRConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which data sources are valid for the target, and then use the target to select which sources to actually pull data from for the respective tools as shown in the unit tests",
      "Cortex XDR APIs require proper API key and API key ID authentication in headers",
      "implement proper rate limiting and pagination handling for large datasets",
      "handle different data types (incidents, alerts, endpoints, threat intelligence) appropriately",
      "support Cortex XDR's advanced authentication with timestamp and signature generation",
      "handle Cortex XDR's specific response formats and error codes properly"
    ]
# !Cortex XDR