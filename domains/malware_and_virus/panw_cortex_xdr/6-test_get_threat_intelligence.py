# 6-test_get_threat_intelligence.py

async def test_get_threat_intelligence(zerg_state=None):
    """Test Cortex XDR threat intelligence retrieval"""
    print("Testing Cortex XDR threat intelligence retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    cortex_xdr_api_url = zerg_state.get("cortex_xdr_api_url").get("value")
    cortex_xdr_api_key = zerg_state.get("cortex_xdr_api_key").get("value")
    cortex_xdr_api_key_id = zerg_state.get("cortex_xdr_api_key_id").get("value")

    from connectors.cortex_xdr.config import CortexXDRConnectorConfig
    from connectors.cortex_xdr.connector import CortexXDRConnector
    from connectors.cortex_xdr.target import CortexXDRTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = CortexXDRConnectorConfig(
        api_url=cortex_xdr_api_url,
        api_key=cortex_xdr_api_key,
        api_key_id=cortex_xdr_api_key_id
    )
    assert isinstance(config, ConnectorConfig), "CortexXDRConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = CortexXDRConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CortexXDRConnector should be of type Connector"

    # get query target options
    cortex_xdr_query_target_options = await connector.get_query_target_options()
    assert isinstance(cortex_xdr_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select threat intelligence data source
    data_source_selector = None
    for selector in cortex_xdr_query_target_options.selectors:
        if selector.type == 'data_sources':  
            data_source_selector = selector
            break

    assert data_source_selector, "failed to retrieve data source selector from query target options"
    assert isinstance(data_source_selector.values, list), "data_source_selector values must be a list"
    
    # Find threat intelligence in available data sources
    threat_intel_source = None
    for source in data_source_selector.values:
        if 'threat' in source.lower() and 'intel' in source.lower():
            threat_intel_source = source
            break
        elif 'indicator' in source.lower():
            threat_intel_source = source
            break
    
    assert threat_intel_source, "Threat intelligence data source not found in available options"
    print(f"Selecting threat intelligence data source: {threat_intel_source}")

    # set up the target with threat intelligence data source
    target = CortexXDRTarget(data_sources=[threat_intel_source])
    assert isinstance(target, ConnectorTargetInterface), "CortexXDRTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_cortex_xdr_threat_intelligence tool and execute it
    get_cortex_xdr_threat_intel_tool = next(tool for tool in tools if tool.name == "get_cortex_xdr_threat_intelligence")
    threat_intel_result = await get_cortex_xdr_threat_intel_tool.execute()
    threat_intel_data = threat_intel_result.result

    print("Type of returned threat intelligence data:", type(threat_intel_data))
    print(f"Threat intelligence count: {len(threat_intel_data)} sample: {str(threat_intel_data)[:200]}")

    # Verify that threat_intel_data is a list
    assert isinstance(threat_intel_data, list), "Threat intelligence data should be a list"
    assert len(threat_intel_data) > 0, "Threat intelligence data should not be empty"
    
    # Limit the number of threat intelligence items to check if there are many
    intel_to_check = threat_intel_data[:5] if len(threat_intel_data) > 5 else threat_intel_data
    
    # Verify structure of each threat intelligence entry
    for intel in intel_to_check:
        # Verify essential threat intelligence fields
        assert "indicator" in intel, "Each threat intel item should have an 'indicator' field"
        assert "type" in intel, "Each threat intel item should have a 'type' field"
        
        # Verify indicator is not empty
        assert intel["indicator"].strip(), "Indicator should not be empty"
        
        # Verify indicator type is valid
        valid_types = ["ip", "domain", "url", "hash_md5", "hash_sha1", "hash_sha256", "file", "registry"]
        indicator_type = intel["type"].lower()
        assert any(valid_type in indicator_type for valid_type in valid_types), f"Invalid indicator type: {indicator_type}"
        
        # Check for additional threat intelligence fields
        intel_fields = ["severity", "confidence", "reputation", "first_seen", "last_seen", "sources", "tags"]
        present_fields = [field for field in intel_fields if field in intel]
        
        print(f"Indicator {intel['indicator']} (type: {intel['type']}) contains: {', '.join(present_fields)}")
        
        # If severity is present, validate it
        if "severity" in intel:
            severity = intel["severity"].lower()
            valid_severities = ["low", "medium", "high", "critical", "info"]
            assert any(valid_sev in severity for valid_sev in valid_severities), f"Invalid severity: {severity}"
        
        # If confidence is present, validate it's numeric
        if "confidence" in intel:
            confidence = intel["confidence"]
            assert isinstance(confidence, (int, float)), "Confidence should be numeric"
            assert 0 <= confidence <= 100, f"Confidence should be between 0 and 100: {confidence}"
        
        # If reputation is present, validate it
        if "reputation" in intel:
            reputation = intel["reputation"].lower()
            valid_reputations = ["malicious", "suspicious", "unknown", "good"]
            assert any(valid_rep in reputation for valid_rep in valid_reputations), f"Invalid reputation: {reputation}"
        
        # If sources are present, validate structure
        if "sources" in intel:
            sources = intel["sources"]
            if isinstance(sources, list):
                assert len(sources) > 0, "Sources list should not be empty"
                for source in sources:
                    assert isinstance(source, str), "Each source should be a string"
                    assert source.strip(), "Source should not be empty"
        
        # Log the structure of the first threat intelligence item for debugging
        if intel == intel_to_check[0]:
            print(f"Example threat intelligence structure: {intel}")

    print(f"Successfully retrieved and validated {len(threat_intel_data)} Cortex XDR threat intelligence items")

    return True