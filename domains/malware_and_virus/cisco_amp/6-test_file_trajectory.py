# 6-test_file_trajectory.py

async def test_file_trajectory(zerg_state=None):
    """Test Cisco AMP file trajectory and hash analysis retrieval"""
    print("Attempting to retrieve file trajectories using Cisco AMP connector")

    assert zerg_state, "this test requires valid zerg_state"

    ciscoamp_url = zerg_state.get("ciscoamp_url").get("value")
    ciscoamp_client_id = zerg_state.get("ciscoamp_client_id").get("value")
    ciscoamp_api_key = zerg_state.get("ciscoamp_api_key").get("value")

    from connectors.ciscoamp.config import CiscoAMPConnectorConfig
    from connectors.ciscoamp.connector import CiscoAMPConnector
    from connectors.ciscoamp.tools import CiscoAMPConnectorTools
    from connectors.ciscoamp.target import CiscoAMPTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = CiscoAMPConnectorConfig(
        url=ciscoamp_url,
        client_id=ciscoamp_client_id,
        api_key=ciscoamp_api_key,
    )
    assert isinstance(config, ConnectorConfig), "CiscoAMPConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = CiscoAMPConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CiscoAMPConnector should be of type Connector"

    # get query target options
    ciscoamp_query_target_options = await connector.get_query_target_options()
    assert isinstance(ciscoamp_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select computers to target (we need computers to get file trajectories from)
    computer_selector = None
    for selector in ciscoamp_query_target_options.selectors:
        if selector.type == 'computer_guids':  
            computer_selector = selector
            break

    assert computer_selector, "failed to retrieve computer selector from query target options"

    assert isinstance(computer_selector.values, list), "computer_selector values must be a list"
    computer_guid = computer_selector.values[0] if computer_selector.values else None
    print(f"Selecting computer GUID: {computer_guid}")

    assert computer_guid, f"failed to retrieve computer GUID from computer selector"

    # set up the target with computer GUIDs
    target = CiscoAMPTarget(computer_guids=[computer_guid])
    assert isinstance(target, ConnectorTargetInterface), "CiscoAMPTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_ciscoamp_file_trajectory tool and execute it with a sample SHA-256 hash
    # Note: In real scenarios, this hash would come from events or detections
    get_ciscoamp_trajectory_tool = next(tool for tool in tools if tool.name == "get_ciscoamp_file_trajectory")
    
    # Use a common malware hash for testing (this is a well-known test hash)
    test_sha256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"  # SHA-256 of empty string - commonly used for testing
    
    ciscoamp_trajectory_result = await get_ciscoamp_trajectory_tool.execute(
        sha256=test_sha256,
        limit=20  # limit to 20 trajectory events for testing
    )
    ciscoamp_trajectory = ciscoamp_trajectory_result.result

    print("Type of returned ciscoamp_trajectory:", type(ciscoamp_trajectory))
    print(f"len trajectory events: {len(ciscoamp_trajectory)} events: {str(ciscoamp_trajectory)[:200]}")

    # Verify that ciscoamp_trajectory is a list
    assert isinstance(ciscoamp_trajectory, list), "ciscoamp_trajectory should be a list"
    
    # Note: Trajectory might be empty for test hashes, which is acceptable
    if len(ciscoamp_trajectory) > 0:
        # Limit the number of trajectory events to check if there are many
        trajectory_to_check = ciscoamp_trajectory[:3] if len(ciscoamp_trajectory) > 3 else ciscoamp_trajectory
        
        # Verify structure of each trajectory event object
        for trajectory_event in trajectory_to_check:
            # Verify essential Cisco AMP trajectory fields
            assert "timestamp" in trajectory_event, "Each trajectory event should have a 'timestamp' field"
            assert "computer" in trajectory_event, "Each trajectory event should have a 'computer' field"
            
            # Verify common trajectory event fields
            computer_info = trajectory_event["computer"]
            assert "connector_guid" in computer_info, "Computer info should have a 'connector_guid' field"
            assert "hostname" in computer_info, "Computer info should have a 'hostname' field"
            
            # Check for file information
            if "file" in trajectory_event:
                file_info = trajectory_event["file"]
                assert "identity" in file_info, "File info should have an 'identity' field"
                
                # Check for hash information
                if "identity" in file_info and "sha256" in file_info["identity"]:
                    assert file_info["identity"]["sha256"] == test_sha256, f"File SHA-256 does not match requested hash"
            
            # Check for additional optional fields
            optional_fields = ["event_type", "file", "network_info", "parent", "detection"]
            present_optional = [field for field in optional_fields if field in trajectory_event]
            
            print(f"Trajectory event at {trajectory_event['timestamp']} contains these optional fields: {', '.join(present_optional)}")
            
            # Log the structure of the first trajectory event for debugging
            if trajectory_event == trajectory_to_check[0]:
                print(f"Example trajectory event structure: {trajectory_event}")

        print(f"Successfully retrieved and validated {len(ciscoamp_trajectory)} Cisco AMP file trajectory events")
    else:
        print("No trajectory events found for test hash - this is acceptable for testing")

    # Test the file hash lookup tool as well
    get_ciscoamp_file_tool = next(tool for tool in tools if tool.name == "get_ciscoamp_file_info")
    ciscoamp_file_result = await get_ciscoamp_file_tool.execute(sha256=test_sha256)
    ciscoamp_file_info = ciscoamp_file_result.result

    print("Type of returned ciscoamp_file_info:", type(ciscoamp_file_info))
    
    # Verify file info structure
    assert isinstance(ciscoamp_file_info, dict), "ciscoamp_file_info should be a dictionary"
    
    # File info might be empty for unknown hashes, which is acceptable
    if ciscoamp_file_info:
        assert "sha256" in ciscoamp_file_info, "File info should contain SHA-256 hash"
        print(f"Example file info structure: {ciscoamp_file_info}")

    print("Successfully completed file trajectory and hash lookup tests")

    return True