# 3-test_query_target_options.py

async def test_computer_enumeration_options(zerg_state=None):
    """Test Cisco AMP computer and group enumeration by way of query target options"""
    print("Attempting to authenticate using Cisco AMP connector")

    assert zerg_state, "this test requires valid zerg_state"

    ciscoamp_url = zerg_state.get("ciscoamp_url").get("value")
    ciscoamp_client_id = zerg_state.get("ciscoamp_client_id").get("value")
    ciscoamp_api_key = zerg_state.get("ciscoamp_api_key").get("value")

    from connectors.ciscoamp.config import CiscoAMPConnectorConfig
    from connectors.ciscoamp.connector import CiscoAMPConnector

    from connectors.config import ConnectorConfig
    from connectors.query_target_options import ConnectorQueryTargetOptions
    from connectors.connector import Connector

    config = CiscoAMPConnectorConfig(
        url=ciscoamp_url,
        client_id=ciscoamp_client_id,
        api_key=ciscoamp_api_key,
    )
    assert isinstance(config, ConnectorConfig), "CiscoAMPConnectorConfig should be of type ConnectorConfig"

    connector = CiscoAMPConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CiscoAMPConnector should be of type Connector"

    ciscoamp_query_target_options = await connector.get_query_target_options()
    assert isinstance(ciscoamp_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    assert ciscoamp_query_target_options, "Failed to retrieve query target options"

    print(f"ciscoamp query target option definitions: {ciscoamp_query_target_options.definitions}")
    print(f"ciscoamp query target option selectors: {ciscoamp_query_target_options.selectors}")

    return True