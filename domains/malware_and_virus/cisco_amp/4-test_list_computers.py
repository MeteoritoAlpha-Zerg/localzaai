# 4-test_list_computers.py

async def test_list_computers(zerg_state=None):
    """Test Cisco AMP computer and group enumeration by way of connector tools"""
    print("Attempting to authenticate using Cisco AMP connector")

    assert zerg_state, "this test requires valid zerg_state"

    ciscoamp_url = zerg_state.get("ciscoamp_url").get("value")
    ciscoamp_client_id = zerg_state.get("ciscoamp_client_id").get("value")
    ciscoamp_api_key = zerg_state.get("ciscoamp_api_key").get("value")

    from connectors.ciscoamp.config import CiscoAMPConnectorConfig
    from connectors.ciscoamp.connector import CiscoAMPConnector
    from connectors.ciscoamp.tools import CiscoAMPConnectorTools
    from connectors.ciscoamp.target import CiscoAMPTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = CiscoAMPConnectorConfig(
        url=ciscoamp_url,
        client_id=ciscoamp_client_id,
        api_key=ciscoamp_api_key,
    )
    assert isinstance(config, ConnectorConfig), "CiscoAMPConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = CiscoAMPConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CiscoAMPConnector should be of type Connector"

    # get query target options
    ciscoamp_query_target_options = await connector.get_query_target_options()
    assert isinstance(ciscoamp_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select computers to target
    computer_selector = None
    for selector in ciscoamp_query_target_options.selectors:
        if selector.type == 'computer_guids':  
            computer_selector = selector
            break

    assert computer_selector, "failed to retrieve computer selector from query target options"

    # grab the first two computers 
    num_computers = 2
    assert isinstance(computer_selector.values, list), "computer_selector values must be a list"
    computer_guids = computer_selector.values[:num_computers] if computer_selector.values else None
    print(f"Selecting computer GUIDs: {computer_guids}")

    assert computer_guids, f"failed to retrieve {num_computers} computer GUIDs from computer selector"

    # set up the target with computer GUIDs
    target = CiscoAMPTarget(computer_guids=computer_guids)
    assert isinstance(target, ConnectorTargetInterface), "CiscoAMPTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_ciscoamp_computers tool
    ciscoamp_get_computers_tool = next(tool for tool in tools if tool.name == "get_ciscoamp_computers")
    ciscoamp_computers_result = await ciscoamp_get_computers_tool.execute()
    ciscoamp_computers = ciscoamp_computers_result.result

    print("Type of returned ciscoamp_computers:", type(ciscoamp_computers))
    print(f"len computers: {len(ciscoamp_computers)} computers: {str(ciscoamp_computers)[:200]}")

    # Verify that ciscoamp_computers is a list
    assert isinstance(ciscoamp_computers, list), "ciscoamp_computers should be a list"
    assert len(ciscoamp_computers) > 0, "ciscoamp_computers should not be empty"
    assert len(ciscoamp_computers) == num_computers, f"ciscoamp_computers should have {num_computers} entries"
    
    # Verify structure of each computer object
    for computer in ciscoamp_computers:
        assert "connector_guid" in computer, "Each computer should have a 'connector_guid' field"
        assert computer["connector_guid"] in computer_guids, f"Computer GUID {computer['connector_guid']} is not in the requested computer_guids"
        
        # Verify essential Cisco AMP computer fields
        assert "hostname" in computer, "Each computer should have a 'hostname' field"
        assert "operating_system" in computer, "Each computer should have an 'operating_system' field"
        assert "install_date" in computer, "Each computer should have an 'install_date' field"
        
        # Check for additional descriptive fields
        descriptive_fields = ["last_seen", "internal_ips", "external_ip", "group_guid", "policy", "is_compromised", "active"]
        present_fields = [field for field in descriptive_fields if field in computer]
        
        print(f"Computer {computer['hostname']} contains these descriptive fields: {', '.join(present_fields)}")
        
        # Log the full structure of the first computer
        if computer == ciscoamp_computers[0]:
            print(f"Example computer structure: {computer}")

    print(f"Successfully retrieved and validated {len(ciscoamp_computers)} Cisco AMP computers")

    return True