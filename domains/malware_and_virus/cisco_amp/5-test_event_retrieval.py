# 5-test_event_retrieval.py

async def test_event_retrieval(zerg_state=None):
    """Test Cisco AMP malware detection and security event retrieval"""
    print("Attempting to retrieve events using Cisco AMP connector")

    assert zerg_state, "this test requires valid zerg_state"

    ciscoamp_url = zerg_state.get("ciscoamp_url").get("value")
    ciscoamp_client_id = zerg_state.get("ciscoamp_client_id").get("value")
    ciscoamp_api_key = zerg_state.get("ciscoamp_api_key").get("value")

    from connectors.ciscoamp.config import CiscoAMPConnectorConfig
    from connectors.ciscoamp.connector import CiscoAMPConnector
    from connectors.ciscoamp.tools import CiscoAMPConnectorTools
    from connectors.ciscoamp.target import CiscoAMPTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = CiscoAMPConnectorConfig(
        url=ciscoamp_url,
        client_id=ciscoamp_client_id,
        api_key=ciscoamp_api_key,
    )
    assert isinstance(config, ConnectorConfig), "CiscoAMPConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = CiscoAMPConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CiscoAMPConnector should be of type Connector"

    # get query target options
    ciscoamp_query_target_options = await connector.get_query_target_options()
    assert isinstance(ciscoamp_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select computers to target
    computer_selector = None
    for selector in ciscoamp_query_target_options.selectors:
        if selector.type == 'computer_guids':  
            computer_selector = selector
            break

    assert computer_selector, "failed to retrieve computer selector from query target options"

    assert isinstance(computer_selector.values, list), "computer_selector values must be a list"
    computer_guid = computer_selector.values[0] if computer_selector.values else None
    print(f"Selecting computer GUID: {computer_guid}")

    assert computer_guid, f"failed to retrieve computer GUID from computer selector"

    # set up the target with computer GUIDs
    target = CiscoAMPTarget(computer_guids=[computer_guid])
    assert isinstance(target, ConnectorTargetInterface), "CiscoAMPTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_ciscoamp_events tool and execute it with computer GUID
    get_ciscoamp_events_tool = next(tool for tool in tools if tool.name == "get_ciscoamp_events")
    ciscoamp_events_result = await get_ciscoamp_events_tool.execute(
        computer_guid=computer_guid,
        limit=50  # limit to 50 events for testing
    )
    ciscoamp_events = ciscoamp_events_result.result

    print("Type of returned ciscoamp_events:", type(ciscoamp_events))
    print(f"len events: {len(ciscoamp_events)} events: {str(ciscoamp_events)[:200]}")

    # Verify that ciscoamp_events is a list
    assert isinstance(ciscoamp_events, list), "ciscoamp_events should be a list"
    assert len(ciscoamp_events) > 0, "ciscoamp_events should not be empty"
    
    # Limit the number of events to check if there are many
    events_to_check = ciscoamp_events[:5] if len(ciscoamp_events) > 5 else ciscoamp_events
    
    # Verify structure of each event object
    for event in events_to_check:
        # Verify essential Cisco AMP event fields
        assert "id" in event, "Each event should have an 'id' field"
        assert "timestamp" in event, "Each event should have a 'timestamp' field"
        assert "event_type" in event, "Each event should have an 'event_type' field"
        
        # Verify common Cisco AMP event fields
        assert "connector_guid" in event, "Each event should have a 'connector_guid' field"
        assert "computer" in event, "Each event should have a 'computer' field"
        
        # Check that event belongs to the requested computer
        assert event["connector_guid"] == computer_guid, f"Event {event['id']} does not belong to the requested computer {computer_guid}"
        
        # Check for common event types
        valid_event_types = [
            "Threat Detected", "Threat Quarantined", "Cloud IOC", "Scan Started", "Scan Completed",
            "Policy Update", "Install", "Uninstall", "Isolation Start", "Isolation Stop",
            "Computer Connector", "Group Move", "Threat Detected in Exclusion"
        ]
        assert event["event_type"] in valid_event_types, f"Event type {event['event_type']} is not a recognized Cisco AMP event type"
        
        # Check for additional optional fields based on event type
        if event["event_type"] == "Threat Detected":
            optional_fields = ["file", "detection", "severity", "detection_id"]
        elif event["event_type"] == "Cloud IOC":
            optional_fields = ["file", "network_info", "detection"]
        else:
            optional_fields = ["file", "network_info", "detection", "scan_time"]
        
        present_optional = [field for field in optional_fields if field in event]
        
        print(f"Event {event['id']} ({event['event_type']}) contains these optional fields: {', '.join(present_optional)}")
        
        # Log the structure of the first event for debugging
        if event == events_to_check[0]:
            print(f"Example event structure: {event}")

    print(f"Successfully retrieved and validated {len(ciscoamp_events)} Cisco AMP events")

    return True