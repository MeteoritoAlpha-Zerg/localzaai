# 6-test_threat_intelligence.py

async def test_threat_intelligence(zerg_state=None):
    """Test SentinelOne threat intelligence and automated response analysis"""
    print("Testing SentinelOne threat intelligence and automated response analysis")

    assert zerg_state, "this test requires valid zerg_state"

    sentinelone_api_token = zerg_state.get("sentinelone_api_token").get("value")
    sentinelone_base_url = zerg_state.get("sentinelone_base_url").get("value")

    from connectors.sentinelone.config import SentinelOneConnectorConfig
    from connectors.sentinelone.connector import SentinelOneConnector
    from connectors.sentinelone.target import SentinelOneTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = SentinelOneConnectorConfig(
        api_token=sentinelone_api_token,
        base_url=sentinelone_base_url
    )
    assert isinstance(config, ConnectorConfig), "SentinelOneConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = SentinelOneConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "SentinelOneConnector should be of type Connector"

    # get query target options to find available sites
    sentinelone_query_target_options = await connector.get_query_target_options()
    assert isinstance(sentinelone_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select site to target for threat intelligence analysis
    site_selector = None
    for selector in sentinelone_query_target_options.selectors:
        if selector.type == 'site_ids':  
            site_selector = selector
            break

    assert site_selector, "failed to retrieve site selector from query target options"

    assert isinstance(site_selector.values, list), "site_selector values must be a list"
    site_id = site_selector.values[0] if site_selector.values else None
    print(f"Using site for threat intelligence analysis: {site_id}")

    assert site_id, f"failed to retrieve site ID from site selector"

    # set up the target with site ID
    target = SentinelOneTarget(site_ids=[site_id])
    assert isinstance(target, ConnectorTargetInterface), "SentinelOneTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_threat_intelligence tool and execute threat intelligence analysis
    get_threat_intel_tool = next(tool for tool in tools if tool.name == "get_threat_intelligence")
    
    # Execute threat intelligence analysis
    threat_intel_result = await get_threat_intel_tool.execute(site_id=site_id)
    threat_intelligence = threat_intel_result.result

    print("Type of returned threat_intelligence:", type(threat_intelligence))
    print(f"Threat intelligence preview: {str(threat_intelligence)[:200]}")

    # Verify that threat_intelligence contains structured data
    assert threat_intelligence is not None, "threat_intelligence should not be None"
    
    # Threat intelligence could be a dictionary with metrics or a list of threat items
    if isinstance(threat_intelligence, dict):
        # Check for common threat intelligence fields
        expected_fields = ["totalThreats", "activeThreatCount", "mitigatedThreatCount", "suspiciousActivities", "automatedResponses"]
        present_fields = [field for field in expected_fields if field in threat_intelligence]
        
        assert len(present_fields) > 0, f"Threat intelligence should contain at least one of these fields: {expected_fields}"
        print(f"Threat intelligence contains these fields: {', '.join(present_fields)}")
        
        # Verify numeric fields are actually numeric
        for field in present_fields:
            if "count" in field.lower() or "total" in field.lower():
                assert isinstance(threat_intelligence[field], (int, float)), f"Field {field} should be numeric"
        
        # Check for automated response data if present
        if "automatedResponses" in threat_intelligence:
            responses = threat_intelligence["automatedResponses"]
            assert isinstance(responses, (list, dict)), "automatedResponses should be structured data"
            
            if isinstance(responses, list) and len(responses) > 0:
                sample_response = responses[0]
                response_fields = ["action", "timestamp", "status", "threatId"]
                present_response_fields = [field for field in response_fields if field in sample_response]
                print(f"Automated responses contain these fields: {', '.join(present_response_fields)}")
        
        # Log the full structure for debugging
        print(f"Threat intelligence structure: {threat_intelligence}")
        
    elif isinstance(threat_intelligence, list):
        assert len(threat_intelligence) > 0, "Threat intelligence list should not be empty"
        
        # Check structure of threat intelligence items
        sample_item = threat_intelligence[0]
        assert isinstance(sample_item, dict), "Threat intelligence items should be dictionaries"
        
        # Look for common threat intelligence fields
        item_fields = ["threatId", "threatType", "severity", "indicators", "automatedActions"]
        present_item_fields = [field for field in item_fields if field in sample_item]
        
        print(f"Threat intelligence items contain these fields: {', '.join(present_item_fields)}")
        
        # Verify threat severity if present
        if "severity" in sample_item:
            valid_severities = ["low", "medium", "high", "critical"]
            assert sample_item["severity"] in valid_severities, f"Threat severity should be valid"
        
        # Check for indicators of compromise if present
        if "indicators" in sample_item:
            indicators = sample_item["indicators"]
            assert isinstance(indicators, (list, dict)), "Indicators should be structured data"
        
        print(f"Example threat intelligence item: {sample_item}")
        
    else:
        # Threat intelligence could be in other formats, ensure it's meaningful
        assert str(threat_intelligence).strip() != "", "Threat intelligence should contain meaningful data"

    print(f"Successfully retrieved and validated threat intelligence data")

    return True