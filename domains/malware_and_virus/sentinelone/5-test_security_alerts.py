# 5-test_security_alerts.py

async def test_security_alerts(zerg_state=None):
    """Test SentinelOne security alerts retrieval"""
    print("Testing SentinelOne security alerts retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    sentinelone_api_token = zerg_state.get("sentinelone_api_token").get("value")
    sentinelone_base_url = zerg_state.get("sentinelone_base_url").get("value")

    from connectors.sentinelone.config import SentinelOneConnectorConfig
    from connectors.sentinelone.connector import SentinelOneConnector
    from connectors.sentinelone.target import SentinelOneTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = SentinelOneConnectorConfig(
        api_token=sentinelone_api_token,
        base_url=sentinelone_base_url
    )
    assert isinstance(config, ConnectorConfig), "SentinelOneConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = SentinelOneConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "SentinelOneConnector should be of type Connector"

    # get query target options
    sentinelone_query_target_options = await connector.get_query_target_options()
    assert isinstance(sentinelone_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select site to target
    site_selector = None
    for selector in sentinelone_query_target_options.selectors:
        if selector.type == 'site_ids':  
            site_selector = selector
            break

    assert site_selector, "failed to retrieve site selector from query target options"

    assert isinstance(site_selector.values, list), "site_selector values must be a list"
    site_id = site_selector.values[0] if site_selector.values else None
    print(f"Selecting site ID: {site_id}")

    assert site_id, f"failed to retrieve site ID from site selector"

    # set up the target with site ID
    target = SentinelOneTarget(site_ids=[site_id])
    assert isinstance(target, ConnectorTargetInterface), "SentinelOneTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_security_alerts tool and execute it with site ID
    get_security_alerts_tool = next(tool for tool in tools if tool.name == "get_security_alerts")
    security_alerts_result = await get_security_alerts_tool.execute(site_id=site_id)
    security_alerts = security_alerts_result.result

    print("Type of returned security_alerts:", type(security_alerts))
    print(f"len alerts: {len(security_alerts)} alerts: {str(security_alerts)[:200]}")

    # Verify that security_alerts is a list
    assert isinstance(security_alerts, list), "security_alerts should be a list"
    assert len(security_alerts) > 0, "security_alerts should not be empty"
    
    # Limit the number of alerts to check if there are many
    alerts_to_check = security_alerts[:5] if len(security_alerts) > 5 else security_alerts
    
    # Verify structure of each alert object
    for alert in alerts_to_check:
        # Verify alert is a dictionary
        assert isinstance(alert, dict), "Each alert should be a dictionary"
        
        # Verify essential alert fields
        assert "id" in alert, "Each alert should have an 'id' field"
        assert "threatInfo" in alert, "Each alert should have a 'threatInfo' field"
        
        # Check threat info structure
        threat_info = alert["threatInfo"]
        assert isinstance(threat_info, dict), "threatInfo should be a dictionary"
        
        # Verify essential threat info fields
        threat_required_fields = ["threatStatus", "confidenceLevel"]
        for field in threat_required_fields:
            assert field in threat_info, f"threatInfo should contain '{field}' field"
        
        # Verify threat status is valid
        valid_threat_statuses = ["active", "mitigated", "resolved", "marked_as_benign"]
        if "threatStatus" in threat_info:
            assert threat_info["threatStatus"] in valid_threat_statuses, f"Threat status {threat_info['threatStatus']} should be valid"
        
        # Verify confidence level is valid
        valid_confidence_levels = ["malicious", "suspicious", "unknown"]
        if "confidenceLevel" in threat_info:
            assert threat_info["confidenceLevel"] in valid_confidence_levels, f"Confidence level {threat_info['confidenceLevel']} should be valid"
        
        # Check for additional common fields
        common_fields = ["agentComputerName", "createdDate", "mitigationStatus", "engines"]
        present_common = [field for field in common_fields if field in alert]
        
        print(f"Alert {alert['id']} contains these common fields: {', '.join(present_common)}")
        
        # Check for mitigation status if present
        if "mitigationStatus" in alert:
            valid_mitigation_statuses = ["not_mitigated", "mitigated", "marked_as_benign"]
            assert alert["mitigationStatus"] in valid_mitigation_statuses, f"Mitigation status should be valid"
        
        # Log the structure of the first alert for debugging
        if alert == alerts_to_check[0]:
            print(f"Example alert structure: {alert}")

    print(f"Successfully retrieved and validated {len(security_alerts)} security alerts")

    return True