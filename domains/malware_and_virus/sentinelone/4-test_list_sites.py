# 4-test_list_sites.py

async def test_list_sites(zerg_state=None):
    """Test SentinelOne site enumeration by way of connector tools"""
    print("Testing SentinelOne site listing")

    assert zerg_state, "this test requires valid zerg_state"

    sentinelone_api_token = zerg_state.get("sentinelone_api_token").get("value")
    sentinelone_base_url = zerg_state.get("sentinelone_base_url").get("value")

    from connectors.sentinelone.config import SentinelOneConnectorConfig
    from connectors.sentinelone.connector import SentinelOneConnector
    from connectors.sentinelone.target import SentinelOneTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = SentinelOneConnectorConfig(
        api_token=sentinelone_api_token,
        base_url=sentinelone_base_url
    )
    assert isinstance(config, ConnectorConfig), "SentinelOneConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = SentinelOneConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "SentinelOneConnector should be of type Connector"

    # get query target options
    sentinelone_query_target_options = await connector.get_query_target_options()
    assert isinstance(sentinelone_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select sites to target
    site_selector = None
    for selector in sentinelone_query_target_options.selectors:
        if selector.type == 'site_ids':  
            site_selector = selector
            break

    assert site_selector, "failed to retrieve site selector from query target options"

    # grab the first two sites 
    num_sites = 2
    assert isinstance(site_selector.values, list), "site_selector values must be a list"
    site_ids = site_selector.values[:num_sites] if site_selector.values else None
    print(f"Selecting site IDs: {site_ids}")

    assert site_ids, f"failed to retrieve {num_sites} site IDs from site selector"

    # set up the target with site IDs
    target = SentinelOneTarget(site_ids=site_ids)
    assert isinstance(target, ConnectorTargetInterface), "SentinelOneTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_sentinelone_sites tool
    sentinelone_get_sites_tool = next(tool for tool in tools if tool.name == "get_sentinelone_sites")
    sentinelone_sites_result = await sentinelone_get_sites_tool.execute()
    sentinelone_sites = sentinelone_sites_result.result

    print("Type of returned sentinelone_sites:", type(sentinelone_sites))
    print(f"len sites: {len(sentinelone_sites)} sites: {str(sentinelone_sites)[:200]}")

    # Verify that sentinelone_sites is a list
    assert isinstance(sentinelone_sites, list), "sentinelone_sites should be a list"
    assert len(sentinelone_sites) > 0, "sentinelone_sites should not be empty"
    assert len(sentinelone_sites) == num_sites, f"sentinelone_sites should have {num_sites} entries"
    
    # Verify structure of each site object
    for site in sentinelone_sites:
        assert "id" in site, "Each site should have an 'id' field"
        assert site["id"] in site_ids, f"Site ID {site['id']} is not in the requested site_ids"
        
        # Verify essential SentinelOne site fields
        assert "name" in site, "Each site should have a 'name' field"
        assert "state" in site, "Each site should have a 'state' field"
        
        # Check for additional descriptive fields
        descriptive_fields = ["totalAgents", "activeLicenses", "accountId", "createdAt", "updatedAt"]
        present_fields = [field for field in descriptive_fields if field in site]
        
        print(f"Site {site['id']} contains these descriptive fields: {', '.join(present_fields)}")
        
        # Verify site state is valid
        valid_states = ["active", "expired", "deleted"]
        if "state" in site:
            assert site["state"] in valid_states, f"Site state {site['state']} should be valid"
        
        # Verify numeric fields are actually numeric
        numeric_fields = ["totalAgents", "activeLicenses"]
        for field in numeric_fields:
            if field in site:
                assert isinstance(site[field], (int, float)), f"Field {field} should be numeric"
        
        # Log the full structure of the first site
        if site == sentinelone_sites[0]:
            print(f"Example site structure: {site}")

    print(f"Successfully retrieved and validated {len(sentinelone_sites)} SentinelOne sites")

    return True