# 4-test_file_scan_results.py

async def test_file_scan_results(zerg_state=None):
    """Test VirusTotal file scan results enumeration by way of connector tools"""
    print("Attempting to retrieve VirusTotal file scan results using VirusTotal connector")

    assert zerg_state, "this test requires valid zerg_state"

    virustotal_api_key = zerg_state.get("virustotal_api_key").get("value")

    from connectors.virustotal.config import VirusTotalConnectorConfig
    from connectors.virustotal.connector import VirusTotalConnector
    from connectors.virustotal.tools import VirusTotalConnectorTools
    from connectors.virustotal.target import VirusTotalTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = VirusTotalConnectorConfig(
        api_key=virustotal_api_key
    )
    assert isinstance(config, ConnectorConfig), "VirusTotalConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = VirusTotalConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "VirusTotalConnector should be of type Connector"

    # get query target options
    virustotal_query_target_options = await connector.get_query_target_options()
    assert isinstance(virustotal_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select scan categories to target
    scan_category_selector = None
    for selector in virustotal_query_target_options.selectors:
        if selector.type == 'scan_categories':  
            scan_category_selector = selector
            break

    assert scan_category_selector, "failed to retrieve scan category selector from query target options"

    # grab the first two scan categories 
    num_categories = 2
    assert isinstance(scan_category_selector.values, list), "scan_category_selector values must be a list"
    scan_categories = scan_category_selector.values[:num_categories] if scan_category_selector.values else None
    print(f"Selecting scan categories: {scan_categories}")

    assert scan_categories, f"failed to retrieve {num_categories} scan categories from scan category selector"

    # set up the target with scan categories
    target = VirusTotalTarget(scan_categories=scan_categories)
    assert isinstance(target, ConnectorTargetInterface), "VirusTotalTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_virustotal_file_reports tool
    virustotal_get_file_reports_tool = next(tool for tool in tools if tool.name == "get_virustotal_file_reports")
    virustotal_file_reports_result = await virustotal_get_file_reports_tool.execute()
    virustotal_file_reports = virustotal_file_reports_result.result

    print("Type of returned virustotal_file_reports:", type(virustotal_file_reports))
    print(f"len file reports: {len(virustotal_file_reports)} reports: {str(virustotal_file_reports)[:200]}")

    # Verify that virustotal_file_reports is a list
    assert isinstance(virustotal_file_reports, list), "virustotal_file_reports should be a list"
    assert len(virustotal_file_reports) > 0, "virustotal_file_reports should not be empty"
    
    # Verify structure of each file report object
    for report in virustotal_file_reports:
        assert "id" in report, "Each file report should have an 'id' field"
        assert "type" in report, "Each file report should have a 'type' field"
        assert "attributes" in report, "Each file report should have an 'attributes' field"
        
        attributes = report["attributes"]
        
        # Verify essential VirusTotal file report fields
        assert "md5" in attributes, "File report attributes should have an 'md5' field"
        assert "sha1" in attributes, "File report attributes should have a 'sha1' field"
        assert "sha256" in attributes, "File report attributes should have a 'sha256' field"
        assert "last_analysis_stats" in attributes, "File report attributes should have 'last_analysis_stats'"
        
        # Verify scan statistics
        stats = attributes["last_analysis_stats"]
        assert "malicious" in stats, "Scan stats should have 'malicious' count"
        assert "suspicious" in stats, "Scan stats should have 'suspicious' count"
        assert "undetected" in stats, "Scan stats should have 'undetected' count"
        assert "harmless" in stats, "Scan stats should have 'harmless' count"
        
        # Check for additional descriptive fields
        descriptive_fields = ["size", "type_description", "first_submission_date", "last_analysis_date"]
        present_fields = [field for field in descriptive_fields if field in attributes]
        
        print(f"File report {report['id'][:8]}... contains these descriptive fields: {', '.join(present_fields)}")
        
        # Log the full structure of the first file report
        if report == virustotal_file_reports[0]:
            print(f"Example file report structure: {report}")

    print(f"Successfully retrieved and validated {len(virustotal_file_reports)} VirusTotal file reports")

    return True