# 5-test_domain_reputation.py

async def test_domain_reputation(zerg_state=None):
    """Test VirusTotal domain reputation and URL analysis retrieval"""
    print("Attempting to retrieve domain reputation using VirusTotal connector")

    assert zerg_state, "this test requires valid zerg_state"

    virustotal_api_key = zerg_state.get("virustotal_api_key").get("value")

    from connectors.virustotal.config import VirusTotalConnectorConfig
    from connectors.virustotal.connector import VirusTotalConnector
    from connectors.virustotal.tools import VirusTotalConnectorTools, GetDomainReputationInput
    from connectors.virustotal.target import VirusTotalTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = VirusTotalConnectorConfig(
        api_key=virustotal_api_key
    )
    assert isinstance(config, ConnectorConfig), "VirusTotalConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = VirusTotalConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "VirusTotalConnector should be of type Connector"

    # get query target options
    virustotal_query_target_options = await connector.get_query_target_options()
    assert isinstance(virustotal_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select scan categories to target
    scan_category_selector = None
    for selector in virustotal_query_target_options.selectors:
        if selector.type == 'scan_categories':  
            scan_category_selector = selector
            break

    assert scan_category_selector, "failed to retrieve scan category selector from query target options"

    assert isinstance(scan_category_selector.values, list), "scan_category_selector values must be a list"
    scan_category = scan_category_selector.values[0] if scan_category_selector.values else None
    print(f"Selecting scan category: {scan_category}")

    assert scan_category, f"failed to retrieve scan category from scan category selector"

    # set up the target with scan category
    target = VirusTotalTarget(scan_categories=[scan_category])
    assert isinstance(target, ConnectorTargetInterface), "VirusTotalTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_domain_reputation tool and execute it with a test domain
    get_domain_reputation_tool = next(tool for tool in tools if tool.name == "get_domain_reputation")
    domain_reputation_result = await get_domain_reputation_tool.execute(domain="google.com")
    domain_reputation = domain_reputation_result.result

    print("Type of returned domain_reputation:", type(domain_reputation))
    print(f"Domain reputation data: {str(domain_reputation)[:200]}")

    # Verify that domain_reputation is a dictionary
    assert isinstance(domain_reputation, dict), "domain_reputation should be a dictionary"
    
    # Verify essential VirusTotal domain report fields
    assert "id" in domain_reputation, "Domain reputation should have an 'id' field"
    assert "type" in domain_reputation, "Domain reputation should have a 'type' field"
    assert "attributes" in domain_reputation, "Domain reputation should have an 'attributes' field"
    
    attributes = domain_reputation["attributes"]
    
    # Verify domain analysis results
    assert "last_analysis_stats" in attributes, "Domain attributes should have 'last_analysis_stats'"
    
    stats = attributes["last_analysis_stats"]
    assert "malicious" in stats, "Domain stats should have 'malicious' count"
    assert "suspicious" in stats, "Domain stats should have 'suspicious' count"
    assert "undetected" in stats, "Domain stats should have 'undetected' count"
    assert "harmless" in stats, "Domain stats should have 'harmless' count"
    
    # Check for additional optional fields
    optional_fields = ["creation_date", "last_modification_date", "registrar", "whois", "categories"]
    present_optional = [field for field in optional_fields if field in attributes]
    
    print(f"Domain reputation contains these optional fields: {', '.join(present_optional)}")
    
    # Test URL analysis if the tool is available
    if "get_url_analysis" in [tool.name for tool in tools]:
        get_url_analysis_tool = next(tool for tool in tools if tool.name == "get_url_analysis")
        url_analysis_result = await get_url_analysis_tool.execute(url="https://google.com")
        url_analysis = url_analysis_result.result
        
        assert isinstance(url_analysis, dict), "URL analysis should be a dictionary"
        assert "attributes" in url_analysis, "URL analysis should have 'attributes' field"
        
        url_attributes = url_analysis["attributes"]
        assert "last_analysis_stats" in url_attributes, "URL attributes should have 'last_analysis_stats'"
        
        print(f"URL analysis completed for: https://google.com")
    
    # Log the structure of the domain reputation for debugging
    print(f"Example domain reputation structure: {domain_reputation}")

    print(f"Successfully retrieved domain reputation for google.com")

    return True