# 6-test_threat_intelligence_search.py

async def test_threat_intelligence_search(zerg_state=None):
    """Test VirusTotal threat intelligence search functionality"""
    print("Attempting to search threat intelligence using VirusTotal connector")

    assert zerg_state, "this test requires valid zerg_state"

    virustotal_api_key = zerg_state.get("virustotal_api_key").get("value")

    from connectors.virustotal.config import VirusTotalConnectorConfig
    from connectors.virustotal.connector import VirusTotalConnector
    from connectors.virustotal.tools import VirusTotalConnectorTools, SearchThreatIntelligenceInput
    from connectors.virustotal.target import VirusTotalTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = VirusTotalConnectorConfig(
        api_key=virustotal_api_key
    )
    assert isinstance(config, ConnectorConfig), "VirusTotalConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = VirusTotalConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "VirusTotalConnector should be of type Connector"

    # get query target options for scan categories
    virustotal_query_target_options = await connector.get_query_target_options()
    assert isinstance(virustotal_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select scan categories to target
    scan_category_selector = None
    for selector in virustotal_query_target_options.selectors:
        if selector.type == 'scan_categories':  
            scan_category_selector = selector
            break

    assert scan_category_selector, "failed to retrieve scan category selector from query target options"

    assert isinstance(scan_category_selector.values, list), "scan_category_selector values must be a list"
    scan_category = scan_category_selector.values[0] if scan_category_selector.values else None
    print(f"Selecting scan category: {scan_category}")

    assert scan_category, f"failed to retrieve scan category from scan category selector"

    # set up the target with scan category
    target = VirusTotalTarget(scan_categories=[scan_category])
    assert isinstance(target, ConnectorTargetInterface), "VirusTotalTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the search_threat_intelligence tool
    search_threat_intel_tool = next(tool for tool in tools if tool.name == "search_threat_intelligence")
    
    # Test search with file hash (using a known malware hash for testing)
    search_result = await search_threat_intel_tool.execute(
        query="type:file size:1024+",
        limit=5
    )
    search_results = search_result.result

    print("Type of returned search results:", type(search_results))
    print(f"len search results: {len(search_results)} results: {str(search_results)[:200]}")

    # Verify that search_results is a list
    assert isinstance(search_results, list), "search_results should be a list"
    
    if len(search_results) > 0:
        # Limit the number of results to check
        results_to_check = search_results[:3] if len(search_results) > 3 else search_results
        
        # Verify structure of each search result
        for result in results_to_check:
            assert "id" in result, "Each result should have an 'id' field"
            assert "type" in result, "Each result should have a 'type' field"
            assert "attributes" in result, "Each result should have an 'attributes' field"
            
            attributes = result["attributes"]
            
            # Check result type and verify appropriate fields
            if result["type"] == "file":
                # File result verification
                assert "md5" in attributes or "sha1" in attributes or "sha256" in attributes, "File result should have hash fields"
                assert "last_analysis_stats" in attributes, "File result should have analysis stats"
                
                stats = attributes["last_analysis_stats"]
                assert "malicious" in stats, "File stats should have 'malicious' count"
                
                print(f"Found file result: {result['id'][:8]}... with {stats.get('malicious', 0)} malicious detections")
                
            elif result["type"] == "domain":
                # Domain result verification
                assert "last_analysis_stats" in attributes, "Domain result should have analysis stats"
                print(f"Found domain result: {result['id']}")
                
            elif result["type"] == "ip_address":
                # IP address result verification
                assert "last_analysis_stats" in attributes, "IP result should have analysis stats"
                print(f"Found IP address result: {result['id']}")
            
            # Log the structure of the first result for debugging
            if result == results_to_check[0]:
                print(f"Example search result structure: {result}")

        print(f"Successfully executed threat intelligence search with {len(search_results)} results")
    else:
        print("Search returned no results, which is acceptable for testing purposes")
    
    # Test hash lookup if the tool is available
    if "lookup_file_hash" in [tool.name for tool in tools]:
        lookup_hash_tool = next(tool for tool in tools if tool.name == "lookup_file_hash")
        
        # Test with a known file hash (EICAR test file)
        eicar_hash = "275a021bbfb6489e54d471899f7db9d1663fc695ec2fe2a2c4538aabf651fd0f"  # EICAR SHA256
        hash_result = await lookup_hash_tool.execute(file_hash=eicar_hash)
        hash_data = hash_result.result
        
        if hash_data:
            assert isinstance(hash_data, dict), "Hash lookup result should be a dictionary"
            assert "attributes" in hash_data, "Hash lookup should have 'attributes' field"
            
            print(f"Hash lookup completed for EICAR test file")
        else:
            print("Hash lookup returned no results")
    
    # Test IP reputation if the tool is available
    if "get_ip_reputation" in [tool.name for tool in tools]:
        get_ip_reputation_tool = next(tool for tool in tools if tool.name == "get_ip_reputation")
        ip_reputation_result = await get_ip_reputation_tool.execute(ip_address="8.8.8.8")
        ip_reputation = ip_reputation_result.result
        
        if ip_reputation:
            assert isinstance(ip_reputation, dict), "IP reputation should be a dictionary"
            assert "attributes" in ip_reputation, "IP reputation should have 'attributes' field"
            
            print(f"IP reputation lookup completed for 8.8.8.8")

    return True