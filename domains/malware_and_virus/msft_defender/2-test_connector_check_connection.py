# 2-test_connector_check_connection.py

async def test_connector_check_connection(zerg_state=None):
    """Test whether connector can successfully connect to Microsoft Defender"""
    print("Testing Microsoft Defender connector connection")

    assert zerg_state, "this test requires valid zerg_state"

    defender_tenant_id = zerg_state.get("defender_tenant_id").get("value")
    defender_client_id = zerg_state.get("defender_client_id").get("value")
    defender_client_secret = zerg_state.get("defender_client_secret").get("value")

    from connectors.defender.config import DefenderConnectorConfig
    from connectors.defender.connector import DefenderConnector
    
    from connectors.config import ConnectorConfig
    from connectors.connector import Connector

    config = DefenderConnectorConfig(
        tenant_id=defender_tenant_id,
        client_id=defender_client_id,
        client_secret=defender_client_secret,
    )
    assert isinstance(config, ConnectorConfig), "DefenderConnectorConfig should be of type ConnectorConfig"

    # initialize the connector
    connector = DefenderConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "DefenderConnector should be of type Connector"

    connection_valid = await connector.check_connection()

    if not isinstance(connection_valid, bool) or not connection_valid:
        raise Exception("check_connection did not return True")

    return True