# 6-test_automated_response.py

async def test_automated_response(zerg_state=None):
    """Test Microsoft Defender automated response actions execution"""
    print("Attempting to execute automated response actions using Microsoft Defender connector")

    assert zerg_state, "this test requires valid zerg_state"

    defender_tenant_id = zerg_state.get("defender_tenant_id").get("value")
    defender_client_id = zerg_state.get("defender_client_id").get("value")
    defender_client_secret = zerg_state.get("defender_client_secret").get("value")

    from connectors.defender.config import DefenderConnectorConfig
    from connectors.defender.connector import DefenderConnector
    from connectors.defender.tools import DefenderConnectorTools, ExecuteResponseActionInput
    from connectors.defender.target import DefenderTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = DefenderConnectorConfig(
        tenant_id=defender_tenant_id,
        client_id=defender_client_id,
        client_secret=defender_client_secret
    )
    assert isinstance(config, ConnectorConfig), "DefenderConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = DefenderConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "DefenderConnector should be of type Connector"

    # get query target options for device groups
    defender_query_target_options = await connector.get_query_target_options()
    assert isinstance(defender_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select device groups to target
    device_group_selector = None
    for selector in defender_query_target_options.selectors:
        if selector.type == 'device_group_ids':  
            device_group_selector = selector
            break

    assert device_group_selector, "failed to retrieve device group selector from query target options"

    assert isinstance(device_group_selector.values, list), "device_group_selector values must be a list"
    device_group_id = device_group_selector.values[0] if device_group_selector.values else None
    print(f"Selecting device group ID: {device_group_id}")

    assert device_group_id, f"failed to retrieve device group ID from device group selector"

    # set up the target with device group ID
    target = DefenderTarget(device_group_ids=[device_group_id])
    assert isinstance(target, ConnectorTargetInterface), "DefenderTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the execute_response_action tool
    execute_response_action_tool = next(tool for tool in tools if tool.name == "execute_response_action")
    
    # Test automated response action execution (using a safe action like getting device info)
    response_action_result = await execute_response_action_tool.execute(
        action_type="get_device_info",
        device_group_id=device_group_id,
        comment="Test automated response action execution"
    )
    response_action = response_action_result.result

    print("Type of returned response action:", type(response_action))
    print(f"Response action data: {str(response_action)[:300]}")

    # Verify that response_action is a dictionary with expected structure
    assert isinstance(response_action, dict), "response_action should be a dictionary"
    
    # Verify essential response action fields
    assert "id" in response_action, "Response action should have an 'id' field"
    assert "type" in response_action, "Response action should have a 'type' field"
    assert "status" in response_action, "Response action should have a 'status' field"
    
    # Verify action execution details
    assert "requestor" in response_action, "Response action should have a 'requestor' field"
    assert "requestorComment" in response_action, "Response action should have a 'requestorComment' field"
    assert "creationDateTimeUtc" in response_action, "Response action should have a 'creationDateTimeUtc' field"
    
    # Check for additional optional fields
    optional_fields = ["lastUpdateDateTimeUtc", "relatedFileInfo", "machineId", "errorHResult"]
    present_optional = [field for field in optional_fields if field in response_action]
    
    print(f"Response action contains these optional fields: {', '.join(present_optional)}")
    
    # Verify action status is valid
    valid_statuses = ["Pending", "InProgress", "Succeeded", "Failed", "TimeOut", "Cancelled"]
    assert response_action["status"] in valid_statuses, f"Response action status should be one of {valid_statuses}"
    
    # Verify action type matches what we requested
    assert response_action["type"] == "get_device_info", "Response action type should match requested action"
    
    # Log the structure of the response action for debugging
    print(f"Example response action structure: {response_action}")
    
    # Test getting response action status
    if "get_response_action_status" in [tool.name for tool in tools]:
        get_status_tool = next(tool for tool in tools if tool.name == "get_response_action_status")
        status_result = await get_status_tool.execute(action_id=response_action["id"])
        status_data = status_result.result
        
        assert isinstance(status_data, dict), "Status data should be a dictionary"
        assert "status" in status_data, "Status data should have a 'status' field"
        
        print(f"Response action status check: {status_data['status']}")
    
    print(f"Successfully executed automated response action with ID: {response_action['id']}")

    return True