# 5-test_threat_intelligence_retrieval.py

async def test_threat_intelligence_retrieval(zerg_state=None):
    """Test Microsoft Defender threat intelligence retrieval from alerts"""
    print("Attempting to retrieve threat intelligence using Microsoft Defender connector")

    assert zerg_state, "this test requires valid zerg_state"

    defender_tenant_id = zerg_state.get("defender_tenant_id").get("value")
    defender_client_id = zerg_state.get("defender_client_id").get("value")
    defender_client_secret = zerg_state.get("defender_client_secret").get("value")

    from connectors.defender.config import DefenderConnectorConfig
    from connectors.defender.connector import DefenderConnector
    from connectors.defender.tools import DefenderConnectorTools, GetDefenderThreatIntelInput
    from connectors.defender.target import DefenderTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = DefenderConnectorConfig(
        tenant_id=defender_tenant_id,
        client_id=defender_client_id,
        client_secret=defender_client_secret
    )
    assert isinstance(config, ConnectorConfig), "DefenderConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = DefenderConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "DefenderConnector should be of type Connector"

    # get query target options
    defender_query_target_options = await connector.get_query_target_options()
    assert isinstance(defender_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select device groups to target
    device_group_selector = None
    for selector in defender_query_target_options.selectors:
        if selector.type == 'device_group_ids':  
            device_group_selector = selector
            break

    assert device_group_selector, "failed to retrieve device group selector from query target options"

    assert isinstance(device_group_selector.values, list), "device_group_selector values must be a list"
    device_group_id = device_group_selector.values[0] if device_group_selector.values else None
    print(f"Selecting device group ID: {device_group_id}")

    assert device_group_id, f"failed to retrieve device group ID from device group selector"

    # set up the target with device group ID
    target = DefenderTarget(device_group_ids=[device_group_id])
    assert isinstance(target, ConnectorTargetInterface), "DefenderTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_defender_threat_intel tool and execute it
    get_defender_threat_intel_tool = next(tool for tool in tools if tool.name == "get_defender_threat_intel")
    defender_threat_intel_result = await get_defender_threat_intel_tool.execute(device_group_id=device_group_id)
    defender_threat_intel = defender_threat_intel_result.result

    print("Type of returned defender_threat_intel:", type(defender_threat_intel))
    print(f"len threat intel: {len(defender_threat_intel)} threat intel: {str(defender_threat_intel)[:200]}")

    # Verify that defender_threat_intel is a list
    assert isinstance(defender_threat_intel, list), "defender_threat_intel should be a list"
    assert len(defender_threat_intel) > 0, "defender_threat_intel should not be empty"
    
    # Limit the number of threat intel items to check if there are many
    intel_to_check = defender_threat_intel[:5] if len(defender_threat_intel) > 5 else defender_threat_intel
    
    # Verify structure of each threat intelligence object
    for intel in intel_to_check:
        # Verify essential Microsoft Defender threat intelligence fields
        assert "id" in intel, "Each threat intel should have an 'id' field"
        assert "indicatorValue" in intel, "Each threat intel should have an 'indicatorValue' field"
        assert "indicatorType" in intel, "Each threat intel should have an 'indicatorType' field"
        assert "action" in intel, "Each threat intel should have an 'action' field"
        
        # Verify common Microsoft Defender threat intelligence fields
        assert "severity" in intel, "Each threat intel should have a 'severity' field"
        assert "title" in intel, "Each threat intel should have a 'title' field"
        
        # Check for additional optional fields
        optional_fields = ["description", "expirationTime", "createdBy", "threatType", "tags"]
        present_optional = [field for field in optional_fields if field in intel]
        
        print(f"Threat intel {intel['id']} (type: {intel['indicatorType']}) contains these optional fields: {', '.join(present_optional)}")
        
        # Log the structure of the first threat intel for debugging
        if intel == intel_to_check[0]:
            print(f"Example threat intelligence structure: {intel}")

    print(f"Successfully retrieved and validated {len(defender_threat_intel)} Microsoft Defender threat intelligence items")

    return True