# Microsoft Defender
name: "defender"
category: "Endpoint Security"
description: "Create an API integration with Microsoft Defender to ingest, analyze, and process malware threat intelligence, endpoint security alerts, and automated response actions"

specs:
  - description: |
      The Microsoft Defender Connector is able to authenticate with Microsoft Defender per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The Microsoft Defender connector is able to authenticate properly with a Microsoft Defender instance;
      The Microsoft Defender connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Microsoft Defender Connector is able to list device groups per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Microsoft Defender
    postconditions: |
      Connector successfully enumerates device groups to populate the target options of the DefenderTarget;

  - description: |
      Microsoft Defender Connector is able to list security alerts and their metadata
    preconditions: |
      A valid authenticated session with Microsoft Defender
    postconditions: |
      Per the configuration as contained in DefenderTarget as provided to DefenderConnectorTools, it is possible
      to get a list of security alerts along with their respective metadata and other relevant alert details
      as may be relevant;
      Ensure that the respective get_defender_alerts function in the DefenderConnectorTools is not hardcoding
      any return values;

  - description: |
      Microsoft Defender Connector is able to retrieve threat intelligence and malware data from selected alerts
    preconditions: |
      A valid authenticated session with Microsoft Defender
    postconditions: |
      Connector successfully retrieves threat intelligence and malware indicators for the selected alerts provided as params
      to the get threat intelligence tool

  - description: |
      Microsoft Defender Connector is able to execute automated response actions
    preconditions: |
      A valid authenticated session with Microsoft Defender
    postconditions: |
      Connector successfully executes automated response actions such as isolating devices, running scans,
      or collecting investigation packages based on security alerts

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Microsoft Defender device groups
    preconditions: |
      An existing Microsoft Defender API credentials
    postconditions: |
      Possible to retrieve the list of Microsoft Defender device groups using get_query_target_options
      and to then use this to set the options in a given DefenderConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real device groups, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List Microsoft Defender security alerts for selected device groups in target
    preconditions: |
      An existing Microsoft Defender API credentials
    postconditions: |
      Possible to retrieve the list of Microsoft Defender security alerts by way of connector tools;
      This list includes details of the alerts to be listed in results; 
      These must be real alerts, and not simulated;
    function_to_run: !python/file 4-test_list_alerts.py

  - description: |
      Retrieve threat intelligence and malware data for selected Microsoft Defender alerts
    preconditions: |
      An existing Microsoft Defender API credentials
    postconditions: |
      Possible to retrieve threat intelligence and malware indicators for the selected Microsoft Defender alerts as passed as params to the connector tools;
      This list only includes threat data of the target alerts to be listed in results; 
      These must be real threat intelligence data, and not simulated;
    function_to_run: !python/file 5-test_threat_intelligence_retrieval.py

  - description: |
      Execute automated response actions on devices and alerts
    preconditions: |
      An existing Microsoft Defender API credentials
    postconditions: |
      Possible to execute automated response actions such as device isolation or investigation package collection;
      Results should contain action status and execution details;
      These must be real response actions, and not simulated;
    function_to_run: !python/file 6-test_automated_response.py

connector_references: 
  - description: "Microsoft Defender SVG logo"
    file_path: "assets/defender.svg"
    environment_path: "connectors/defender/defender.svg"
    format: "svg"
    required: true
    read_only: true

user_references: []

configs:
  - name: "defender_tenant_id"
    description: "Azure AD Tenant ID for Microsoft Defender, note this should be included as tenant_id in DefenderConnectorConfig"
    value: !env/var 

  - name: "defender_client_id"
    description: "Azure AD Application Client ID for Microsoft Defender, note this should be included as client_id in DefenderConnectorConfig"
    value: !env/var 

  - name: "defender_client_secret"
    description: "Azure AD Application Client Secret for Microsoft Defender, note this should be included as client_secret in DefenderConnectorConfig"
    value: !env/var 

  - name: "defender_api_base_url"
    description: "Microsoft Defender API base URL"
    value: "https://api.securitycenter.microsoft.com"

  - name: "defender_api_request_timeout"
    description: "Request timeout in seconds"
    value: 60

  - name: "defender_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "defender_default_page_size"
    description: "Default number of results to return per page"
    value: 100

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Microsoft Defender connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "DefenderConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which device groups are valid for the target, and then use the target to select which device groups to actually pull data from for the respective tools as shown in the unit tests",
      "handle Microsoft Defender-specific data structures like alerts, machines, indicators, and actions appropriately",
      "respect Microsoft Defender API rate limits and implement proper error handling for security data",
      "support OAuth2 authentication flow with Azure AD for secure API access",
      "handle different alert severity levels and categories appropriately"
    ]
# !Microsoft Defender