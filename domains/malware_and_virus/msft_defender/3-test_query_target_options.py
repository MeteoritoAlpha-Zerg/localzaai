# 3-test_query_target_options.py

async def test_device_group_enumeration_options(zerg_state=None):
    """Test Microsoft Defender device group enumeration by way of query target options"""
    print("Attempting to authenticate using Microsoft Defender connector")

    assert zerg_state, "this test requires valid zerg_state"

    defender_tenant_id = zerg_state.get("defender_tenant_id").get("value")
    defender_client_id = zerg_state.get("defender_client_id").get("value")
    defender_client_secret = zerg_state.get("defender_client_secret").get("value")

    from connectors.defender.config import DefenderConnectorConfig
    from connectors.defender.connector import DefenderConnector

    from connectors.config import ConnectorConfig
    from connectors.query_target_options import ConnectorQueryTargetOptions
    from connectors.connector import Connector

    config = DefenderConnectorConfig(
        tenant_id=defender_tenant_id,
        client_id=defender_client_id,
        client_secret=defender_client_secret,
    )
    assert isinstance(config, ConnectorConfig), "DefenderConnectorConfig should be of type ConnectorConfig"

    connector = DefenderConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "DefenderConnector should be of type Connector"

    defender_query_target_options = await connector.get_query_target_options()
    assert isinstance(defender_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    assert defender_query_target_options, "Failed to retrieve query target options"

    print(f"Microsoft Defender query target option definitions: {defender_query_target_options.definitions}")
    print(f"Microsoft Defender query target option selectors: {defender_query_target_options.selectors}")

    return True