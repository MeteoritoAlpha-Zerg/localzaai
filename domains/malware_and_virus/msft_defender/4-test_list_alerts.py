# 4-test_list_alerts.py

async def test_list_alerts(zerg_state=None):
    """Test Microsoft Defender security alerts enumeration by way of connector tools"""
    print("Attempting to retrieve Microsoft Defender alerts using Defender connector")

    assert zerg_state, "this test requires valid zerg_state"

    defender_tenant_id = zerg_state.get("defender_tenant_id").get("value")
    defender_client_id = zerg_state.get("defender_client_id").get("value")
    defender_client_secret = zerg_state.get("defender_client_secret").get("value")

    from connectors.defender.config import DefenderConnectorConfig
    from connectors.defender.connector import DefenderConnector
    from connectors.defender.tools import DefenderConnectorTools
    from connectors.defender.target import DefenderTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = DefenderConnectorConfig(
        tenant_id=defender_tenant_id,
        client_id=defender_client_id,
        client_secret=defender_client_secret
    )
    assert isinstance(config, ConnectorConfig), "DefenderConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = DefenderConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "DefenderConnector should be of type Connector"

    # get query target options
    defender_query_target_options = await connector.get_query_target_options()
    assert isinstance(defender_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select device groups to target
    device_group_selector = None
    for selector in defender_query_target_options.selectors:
        if selector.type == 'device_group_ids':  
            device_group_selector = selector
            break

    assert device_group_selector, "failed to retrieve device group selector from query target options"

    # grab the first two device groups 
    num_groups = 2
    assert isinstance(device_group_selector.values, list), "device_group_selector values must be a list"
    device_group_ids = device_group_selector.values[:num_groups] if device_group_selector.values else None
    print(f"Selecting device group IDs: {device_group_ids}")

    assert device_group_ids, f"failed to retrieve {num_groups} device group IDs from device group selector"

    # set up the target with device group IDs
    target = DefenderTarget(device_group_ids=device_group_ids)
    assert isinstance(target, ConnectorTargetInterface), "DefenderTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_defender_alerts tool
    defender_get_alerts_tool = next(tool for tool in tools if tool.name == "get_defender_alerts")
    defender_alerts_result = await defender_get_alerts_tool.execute()
    defender_alerts = defender_alerts_result.result

    print("Type of returned defender_alerts:", type(defender_alerts))
    print(f"len alerts: {len(defender_alerts)} alerts: {str(defender_alerts)[:200]}")

    # Verify that defender_alerts is a list
    assert isinstance(defender_alerts, list), "defender_alerts should be a list"
    assert len(defender_alerts) > 0, "defender_alerts should not be empty"
    
    # Verify structure of each alert object
    for alert in defender_alerts:
        assert "id" in alert, "Each alert should have an 'id' field"
        assert "title" in alert, "Each alert should have a 'title' field"
        assert "description" in alert, "Each alert should have a 'description' field"
        
        # Verify essential Microsoft Defender alert fields
        assert "severity" in alert, "Each alert should have a 'severity' field"
        assert "status" in alert, "Each alert should have a 'status' field"
        assert "category" in alert, "Each alert should have a 'category' field"
        assert "alertCreationTime" in alert, "Each alert should have an 'alertCreationTime' field"
        
        # Check for additional descriptive fields
        descriptive_fields = ["machineId", "detectionSource", "threatFamilyName", "assignedTo"]
        present_fields = [field for field in descriptive_fields if field in alert]
        
        print(f"Alert {alert['id']} contains these descriptive fields: {', '.join(present_fields)}")
        
        # Log the full structure of the first alert
        if alert == defender_alerts[0]:
            print(f"Example alert structure: {alert}")

    print(f"Successfully retrieved and validated {len(defender_alerts)} Microsoft Defender alerts")

    return True