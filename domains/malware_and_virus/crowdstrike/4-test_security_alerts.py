# 4-test_security_alerts.py

async def test_security_alerts(zerg_state=None):
    """Test retrieval of security alerts from CrowdStrike"""
    print("Attempting to authenticate using CrowdStrike connector")

    assert zerg_state, "this test requires valid zerg_state"

    crowdstrike_host = zerg_state.get("crowdstrike_host").get("value")
    crowdstrike_client_id = zerg_state.get("crowdstrike_client_id").get("value")
    crowdstrike_client_secret = zerg_state.get("crowdstrike_client_secret").get("value")

    from connectors.crowdstrike.config import CrowdStrikeConnectorConfig
    from connectors.crowdstrike.connector import CrowdStrikeConnector
    from connectors.crowdstrike.target import CrowdStrikeTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = CrowdStrikeConnectorConfig(
        url=crowdstrike_host,
        client_id=crowdstrike_client_id,
        client_secret=crowdstrike_client_secret
    )
    assert isinstance(config, ConnectorConfig), "CrowdStrikeConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = CrowdStrikeConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CrowdStrikeConnector should be of type Connector"

    # get query target options
    crowdstrike_query_target_options = await connector.get_query_target_options()
    assert isinstance(crowdstrike_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select endpoints to target
    endpoint_selector = None
    for selector in crowdstrike_query_target_options.selectors:
        if selector.type == 'endpoints':  
            endpoint_selector = selector
            break

    assert endpoint_selector, "failed to retrieve endpoint selector from query target options"

    assert isinstance(endpoint_selector.values, list), "endpoint_selector values must be a list"
    endpoint_id = endpoint_selector.values[0] if endpoint_selector.values else None
    print(f"Selecting endpoint ID: {endpoint_id}")

    assert endpoint_id, "failed to retrieve endpoint ID from endpoint selector"

    # set up the target with endpoints
    target = CrowdStrikeTarget(endpoints=[endpoint_id])
    assert isinstance(target, ConnectorTargetInterface), "CrowdStrikeTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_security_alerts tool and execute it with endpoint ID
    get_security_alerts_tool = next(tool for tool in tools if tool.name == "get_security_alerts")
    security_alerts_result = await get_security_alerts_tool.execute(endpoint_id=endpoint_id)
    security_alerts = security_alerts_result.raw_result

    print("Type of returned security_alerts:", type(security_alerts))
    print(f"Total alerts: {len(security_alerts)} details: {str(security_alerts)[:200]}")

    # Verify that security_alerts is a list
    assert isinstance(security_alerts, list), "security_alerts should be a list"
    assert len(security_alerts) > 0, "security_alerts should not be empty"
    
    # Limit the number of alerts to check if there are many
    alerts_to_check = security_alerts[:5] if len(security_alerts) > 5 else security_alerts
    
    # Verify structure of each alert object
    for alert in alerts_to_check:
        # Verify essential CrowdStrike alert fields
        assert "id" in alert, "Each alert should have an 'id' field"
        assert "device_id" in alert, "Each alert should have a 'device_id' field"
        
        # Check if alert belongs to requested endpoint
        assert alert.get("device_id") == endpoint_id, f"Alert {alert['id']} does not belong to the requested endpoint"
        
        # Verify common CrowdStrike alert fields
        essential_fields = ["severity", "status", "created_timestamp", "detection_name", "tactic", "technique"]
        for field in essential_fields:
            assert field in alert, f"Alert should contain '{field}'"
        
        # Additional optional fields to check (if present)
        optional_fields = ["description", "ip_address", "hostname", "mitre_attack_id", "resolution_status"]
        present_optional = [field for field in optional_fields if field in alert]
        
        print(f"Alert {alert['id']} contains these optional fields: {', '.join(present_optional)}")
        
        # Log the structure of the first alert for debugging
        if alert == alerts_to_check[0]:
            print(f"Example alert structure: {alert}")

    print(f"Successfully retrieved and validated {len(security_alerts)} security alerts")

    return True