# Crowdstrike
name: "crowdstrike"
category: "Endpoint Detection and Response (EDR)"
description: "Create an API integration with CrowdStrike Falcon per its API specification"

specs:
  - description: |
      The CrowdStrike Connector is able to authenticate with CrowdStrike per its implementation in the code 
      environment only
    preconditions: |
      A valid CrowdStrike API key
    postconditions: |
      The CrowdStrike connector is able to authenticate properly with a CrowdStrike instance;
      The CrowdStrike connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      CrowdStrike Connector is able to list CrowdStrike endpoints per user of get_query_target_options
    preconditions: |
      A valid authenticated session with CrowdStrike
    postconditions: |
      Connector successfully enumerates endpoints to populate the target options of the CrowdStrikeTarget;

  - description: |
      CrowdStrike Connector is able to list security alerts and detections per user of get_query_target_options
    preconditions: |
      A valid authenticated session with CrowdStrike
    postconditions: |
      Connector successfully enumerates alerts to populate the target options of the CrowdStrikeTarget;

  # - description: |
  #     CrowdStrike Connector is able to fetch threat intelligence data
  #   preconditions: |
  #     A valid authenticated session with CrowdStrike
  #   postconditions: |
  #     Per the configuration as contained in CrowdStrikeTarget as provided to CrowdStrikeConnectorTools, it is possible
  #     to get threat intelligence data along with relevant details as may be relevant;
  #     Ensure that the respective get_threat_intelligence function in the CrowdStrikeConnectorTools is not hardcoding
  #     any return values;

  # - description: |
  #     CrowdStrike Connector is able to list active security incidents
  #   preconditions: |
  #     A valid authenticated session with CrowdStrike
  #   postconditions: |
  #     Connector successfully lists incidents for the selected endpoint provided as a param
  #     to the list incidents tool
      
  # - description: |
  #     CrowdStrike Connector is able to trigger automated response actions
  #   preconditions: |
  #     A valid authenticated session with CrowdStrike
  #   postconditions: |
  #     Connector successfully initiates endpoint isolation or other remediation actions when provided
  #     appropriate parameters

  # - description: |
  #     CrowdStrike Connector handles API rate limiting and retries
  #   preconditions: |
  #     A valid CrowdStrike API connection
  #   postconditions: |
  #     Connector gracefully manages rate-limiting responses and implements retry logic correctly

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates CrowdStrike endpoints
    preconditions: |
      An existing CrowdStrike API key and credentials
    postconditions: |
      Possible to retrieve the list of CrowdStrike endpoints using get_query_target_options
      and to then use this to set the options in a given CrowdStrikeConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real endpoints, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      Retrieve security alerts from CrowdStrike
    preconditions: |
      An existing CrowdStrike API key and credentials
    postconditions: |
      Possible to retrieve security alerts by way of connector tools;
      This list includes details of the alerts to be listed in results; 
      These must be real alerts, and not simulated;
    function_to_run: !python/file 4-test_security_alerts.py

  # - description: |
  #     Retrieve threat intelligence for identified malware
  #   preconditions: |
  #     An existing CrowdStrike API key and credentials
  #   postconditions: |
  #     Possible to retrieve threat intelligence data as passed as a param to the connector tools;
  #     This data must include relevant threat details; 
  #     These must be real threat data, and not simulated;
  #   function_to_run: !python/file 5-test_threat_intelligence.py
    
  # - description: |
  #     Retrieve active security incidents
  #   preconditions: |
  #     An existing CrowdStrike API key and credentials
  #   postconditions: |
  #     Possible to retrieve security incidents for selected endpoints as passed as a param to the connector tools;
  #     This list only includes incidents relevant to the target endpoint; 
  #     These must be real incidents, and not simulated;
  #   function_to_run: !python/file 6-test_security_incidents.py
    
  # - description: |
  #     Test endpoint isolation functionality
  #   preconditions: |
  #     An existing CrowdStrike API key and credentials
  #   postconditions: |
  #     Possible to trigger endpoint isolation for a specified endpoint ID;
  #     Response confirms successful action initiation;
  #   function_to_run: !python/file 7-test_endpoint_isolation.py
    
  # - description: |
  #     Test API rate limiting and retry handling
  #   preconditions: |
  #     An existing CrowdStrike API key and credentials
  #   postconditions: |
  #     Connector appropriately handles rate-limiting responses;
  #     Retry logic is implemented correctly with backoff strategy;
  #   function_to_run: !python/file 8-test_rate_limiting.py

connector_references: 
  - description: "CrowdStrike SVG logo"
    file_path: "assets/crowdstrike.svg"
    environment_path: "connectors/crowdstrike/crowdstrike.svg"
    format: "svg"
    required: true
    read_only: true

user_references: []

configs:
  - name: "crowdstrike_host"
    description: "The base URL of the CrowdStrike instance, note this should be included as url in CrowdStrikeConnectorConfig"
    value: !env/var

  - name: "crowdstrike_client_id"
    description: "Client ID for authenticating with CrowdStrike, note this should be included as client_id in CrowdStrikeConnectorConfig"
    value: !env/var 

  - name: "crowdstrike_client_secret"
    description: "Client Secret for authenticating with CrowdStrike, note this should be included as client_secret in CrowdStrikeConnectorConfig"
    value: !env/var 

  - name: "crowdstrike_base_url"
    description: "Base URL for the CrowdStrike API (e.g. https://api.crowdstrike.com or your regional endpoint)"
    value: !env/var

  - name: "crowdstrike_api_request_timeout"
    description: "Request timeout in seconds"
    value: 30

  - name: "crowdstrike_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the CrowdStrike connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "CrowdStrikeConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which endpoints are valid for the target, and then use the target to select which endpoints to actually pull data from for the respective tools as shown in the unit tests",
      "implement appropriate error handling and retry logic for API rate limiting scenarios"
    ]
# !Crowdstrike