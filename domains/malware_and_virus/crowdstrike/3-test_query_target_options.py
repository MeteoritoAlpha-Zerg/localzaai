# 3-test_query_target_options.py

async def test_project_enumeration_options(zerg_state=None):
    """Test Crowdstrike project enumeration by way of query target options"""
    print("Attempting to authenticate using Crowdstrike connector")

    assert zerg_state, "this test requires valid zerg_state"

    crowdstrike_host = zerg_state.get("crowdstrike_host").get("value")
    crowdstrike_client_id = zerg_state.get("crowdstrike_client_id").get("value")
    crowdstrike_client_secret = zerg_state.get("crowdstrike_client_secret").get("value")

    from connectors.crowdstrike.config import CrowdstrikeConnectorConfig
    from connectors.crowdstrike.connector import CrowdstrikeConnector

    from connectors.config import ConnectorConfig
    from connectors.query_target_options import ConnectorQueryTargetOptions
    from connectors.connector import Connector

    # Note this is common code
    from common.models.tool import Tool

    # initialize the connector config
    config = CrowdstrikeConnectorConfig(
        host=crowdstrike_host,
        client_id=crowdstrike_client_id,
        client_secret=crowdstrike_client_secret,
    )
    assert isinstance(config, ConnectorConfig), "CrowdstrikeConnectorConfig should be of type ConnectorConfig"

    connector = CrowdstrikeConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "CrowdstrikeConnectorConfig should be of type ConnectorConfig"

    query_target_options = await connector.get_query_target_options()
    assert isinstance(query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    assert query_target_options, "Failed to retrieve query target options"

    print(f"crowdstrike query target option definitions: {query_target_options.definitions}")
    print(f"crowdstrike query target option selectors: {query_target_options.selectors}")

    return True