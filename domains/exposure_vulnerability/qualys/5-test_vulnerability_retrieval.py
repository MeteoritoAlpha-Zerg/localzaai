# 5-test_vulnerability_retrieval.py

async def test_vulnerability_retrieval(zerg_state=None):
    """Test Qualys vulnerability retrieval from scans"""
    print("Attempting to retrieve vulnerabilities using Qualys connector")

    assert zerg_state, "this test requires valid zerg_state"

    qualys_url = zerg_state.get("qualys_url").get("value")
    qualys_username = zerg_state.get("qualys_username").get("value")
    qualys_password = zerg_state.get("qualys_password").get("value")

    from connectors.qualys.config import QualysConnectorConfig
    from connectors.qualys.connector import QualysConnector
    from connectors.qualys.tools import QualysConnectorTools, GetQualysVulnerabilitiesInput
    from connectors.qualys.target import QualysTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = QualysConnectorConfig(
        url=qualys_url,
        username=qualys_username,
        password=qualys_password
    )
    assert isinstance(config, ConnectorConfig), "QualysConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = QualysConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "QualysConnector should be of type Connector"

    # get query target options
    qualys_query_target_options = await connector.get_query_target_options()
    assert isinstance(qualys_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select asset groups to target
    asset_group_selector = None
    for selector in qualys_query_target_options.selectors:
        if selector.type == 'asset_group_ids':  
            asset_group_selector = selector
            break

    assert asset_group_selector, "failed to retrieve asset group selector from query target options"

    assert isinstance(asset_group_selector.values, list), "asset_group_selector values must be a list"
    asset_group_id = asset_group_selector.values[0] if asset_group_selector.values else None
    print(f"Selecting asset group ID: {asset_group_id}")

    assert asset_group_id, f"failed to retrieve asset group ID from asset group selector"

    # set up the target with asset group ID
    target = QualysTarget(asset_group_ids=[asset_group_id])
    assert isinstance(target, ConnectorTargetInterface), "QualysTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_qualys_vulnerabilities tool and execute it
    get_qualys_vulnerabilities_tool = next(tool for tool in tools if tool.name == "get_qualys_vulnerabilities")
    qualys_vulnerabilities_result = await get_qualys_vulnerabilities_tool.execute(asset_group_id=asset_group_id)
    qualys_vulnerabilities = qualys_vulnerabilities_result.result

    print("Type of returned qualys_vulnerabilities:", type(qualys_vulnerabilities))
    print(f"len vulnerabilities: {len(qualys_vulnerabilities)} vulnerabilities: {str(qualys_vulnerabilities)[:200]}")

    # Verify that qualys_vulnerabilities is a list
    assert isinstance(qualys_vulnerabilities, list), "qualys_vulnerabilities should be a list"
    assert len(qualys_vulnerabilities) > 0, "qualys_vulnerabilities should not be empty"
    
    # Limit the number of vulnerabilities to check if there are many
    vulns_to_check = qualys_vulnerabilities[:5] if len(qualys_vulnerabilities) > 5 else qualys_vulnerabilities
    
    # Verify structure of each vulnerability object
    for vuln in vulns_to_check:
        # Verify essential Qualys vulnerability fields
        assert "qid" in vuln, "Each vulnerability should have a 'qid' field"
        assert "title" in vuln, "Each vulnerability should have a 'title' field"
        assert "severity" in vuln, "Each vulnerability should have a 'severity' field"
        assert "cvss_score" in vuln or "cvss3_score" in vuln, "Each vulnerability should have a CVSS score field"
        
        # Verify common Qualys vulnerability fields
        assert "type" in vuln, "Each vulnerability should have a 'type' field"
        assert "status" in vuln, "Each vulnerability should have a 'status' field"
        
        # Check for additional optional fields
        optional_fields = ["first_found_datetime", "last_found_datetime", "times_found", "cve_id", "bugtraq_id"]
        present_optional = [field for field in optional_fields if field in vuln]
        
        print(f"Vulnerability {vuln['qid']} (severity: {vuln['severity']}) contains these optional fields: {', '.join(present_optional)}")
        
        # Log the structure of the first vulnerability for debugging
        if vuln == vulns_to_check[0]:
            print(f"Example vulnerability structure: {vuln}")

    print(f"Successfully retrieved and validated {len(qualys_vulnerabilities)} Qualys vulnerabilities")

    return True