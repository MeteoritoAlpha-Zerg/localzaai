# 4-test_list_scans.py

async def test_list_scans(zerg_state=None):
    """Test Qualys scan enumeration by way of connector tools"""
    print("Attempting to retrieve Qualys scans using Qualys connector")

    assert zerg_state, "this test requires valid zerg_state"

    qualys_url = zerg_state.get("qualys_url").get("value")
    qualys_username = zerg_state.get("qualys_username").get("value")
    qualys_password = zerg_state.get("qualys_password").get("value")

    from connectors.qualys.config import QualysConnectorConfig
    from connectors.qualys.connector import QualysConnector
    from connectors.qualys.tools import QualysConnectorTools
    from connectors.qualys.target import QualysTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = QualysConnectorConfig(
        url=qualys_url,
        username=qualys_username,
        password=qualys_password
    )
    assert isinstance(config, ConnectorConfig), "QualysConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = QualysConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "QualysConnector should be of type Connector"

    # get query target options
    qualys_query_target_options = await connector.get_query_target_options()
    assert isinstance(qualys_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select asset groups to target
    asset_group_selector = None
    for selector in qualys_query_target_options.selectors:
        if selector.type == 'asset_group_ids':  
            asset_group_selector = selector
            break

    assert asset_group_selector, "failed to retrieve asset group selector from query target options"

    # grab the first two asset groups 
    num_groups = 2
    assert isinstance(asset_group_selector.values, list), "asset_group_selector values must be a list"
    asset_group_ids = asset_group_selector.values[:num_groups] if asset_group_selector.values else None
    print(f"Selecting asset group IDs: {asset_group_ids}")

    assert asset_group_ids, f"failed to retrieve {num_groups} asset group IDs from asset group selector"

    # set up the target with asset group IDs
    target = QualysTarget(asset_group_ids=asset_group_ids)
    assert isinstance(target, ConnectorTargetInterface), "QualysTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_qualys_scans tool
    qualys_get_scans_tool = next(tool for tool in tools if tool.name == "get_qualys_scans")
    qualys_scans_result = await qualys_get_scans_tool.execute()
    qualys_scans = qualys_scans_result.result

    print("Type of returned qualys_scans:", type(qualys_scans))
    print(f"len scans: {len(qualys_scans)} scans: {str(qualys_scans)[:200]}")

    # Verify that qualys_scans is a list
    assert isinstance(qualys_scans, list), "qualys_scans should be a list"
    assert len(qualys_scans) > 0, "qualys_scans should not be empty"
    
    # Verify structure of each scan object
    for scan in qualys_scans:
        assert "id" in scan, "Each scan should have an 'id' field"
        assert "ref" in scan, "Each scan should have a 'ref' field"
        assert "title" in scan, "Each scan should have a 'title' field"
        
        # Verify essential Qualys scan fields
        assert "launch_datetime" in scan, "Each scan should have a 'launch_datetime' field"
        assert "status" in scan, "Each scan should have a 'status' field"
        assert "type" in scan, "Each scan should have a 'type' field"
        
        # Check for additional descriptive fields
        descriptive_fields = ["duration", "target", "processed", "user_login"]
        present_fields = [field for field in descriptive_fields if field in scan]
        
        print(f"Scan {scan['id']} contains these descriptive fields: {', '.join(present_fields)}")
        
        # Log the full structure of the first scan
        if scan == qualys_scans[0]:
            print(f"Example scan structure: {scan}")

    print(f"Successfully retrieved and validated {len(qualys_scans)} Qualys scans")

    return True