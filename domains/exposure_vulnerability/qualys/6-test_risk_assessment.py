# 6-test_risk_assessment.py

async def test_risk_assessment(zerg_state=None):
    """Test Qualys risk assessment and security posture insights generation"""
    print("Attempting to generate risk assessment using Qualys connector")

    assert zerg_state, "this test requires valid zerg_state"

    qualys_url = zerg_state.get("qualys_url").get("value")
    qualys_username = zerg_state.get("qualys_username").get("value")
    qualys_password = zerg_state.get("qualys_password").get("value")

    from connectors.qualys.config import QualysConnectorConfig
    from connectors.qualys.connector import QualysConnector
    from connectors.qualys.tools import QualysConnectorTools, GenerateRiskAssessmentInput
    from connectors.qualys.target import QualysTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = QualysConnectorConfig(
        url=qualys_url,
        username=qualys_username,
        password=qualys_password
    )
    assert isinstance(config, ConnectorConfig), "QualysConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = QualysConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "QualysConnector should be of type Connector"

    # get query target options for asset groups
    qualys_query_target_options = await connector.get_query_target_options()
    assert isinstance(qualys_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select asset groups to target
    asset_group_selector = None
    for selector in qualys_query_target_options.selectors:
        if selector.type == 'asset_group_ids':  
            asset_group_selector = selector
            break

    assert asset_group_selector, "failed to retrieve asset group selector from query target options"

    assert isinstance(asset_group_selector.values, list), "asset_group_selector values must be a list"
    asset_group_id = asset_group_selector.values[0] if asset_group_selector.values else None
    print(f"Selecting asset group ID: {asset_group_id}")

    assert asset_group_id, f"failed to retrieve asset group ID from asset group selector"

    # set up the target with asset group ID
    target = QualysTarget(asset_group_ids=[asset_group_id])
    assert isinstance(target, ConnectorTargetInterface), "QualysTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the generate_risk_assessment tool
    generate_risk_assessment_tool = next(tool for tool in tools if tool.name == "generate_risk_assessment")
    
    # Test risk assessment generation
    risk_assessment_result = await generate_risk_assessment_tool.execute(
        asset_group_id=asset_group_id,
        include_trends=True
    )
    risk_assessment = risk_assessment_result.result

    print("Type of returned risk assessment:", type(risk_assessment))
    print(f"Risk assessment data: {str(risk_assessment)[:300]}")

    # Verify that risk_assessment is a dictionary with expected structure
    assert isinstance(risk_assessment, dict), "risk_assessment should be a dictionary"
    
    # Verify essential risk assessment fields
    assert "overall_risk_score" in risk_assessment, "Risk assessment should have an 'overall_risk_score' field"
    assert "vulnerability_summary" in risk_assessment, "Risk assessment should have a 'vulnerability_summary' field"
    assert "asset_summary" in risk_assessment, "Risk assessment should have an 'asset_summary' field"
    
    # Verify vulnerability summary structure
    vuln_summary = risk_assessment["vulnerability_summary"]
    assert isinstance(vuln_summary, dict), "vulnerability_summary should be a dictionary"
    assert "total_vulnerabilities" in vuln_summary, "vulnerability_summary should have 'total_vulnerabilities'"
    assert "by_severity" in vuln_summary, "vulnerability_summary should have 'by_severity'"
    
    severity_breakdown = vuln_summary["by_severity"]
    assert isinstance(severity_breakdown, dict), "by_severity should be a dictionary"
    
    # Check for severity levels
    severity_levels = ["critical", "high", "medium", "low", "info"]
    for level in severity_levels:
        if level in severity_breakdown:
            assert isinstance(severity_breakdown[level], (int, float)), f"Severity level {level} should be a number"
    
    # Verify asset summary structure
    asset_summary = risk_assessment["asset_summary"]
    assert isinstance(asset_summary, dict), "asset_summary should be a dictionary"
    assert "total_assets" in asset_summary, "asset_summary should have 'total_assets'"
    
    # Check for additional optional fields
    optional_fields = ["recommendations", "trends", "compliance_status", "top_vulnerabilities"]
    present_optional = [field for field in optional_fields if field in risk_assessment]
    
    print(f"Risk assessment contains these optional fields: {', '.join(present_optional)}")
    
    # Verify recommendations if present
    if "recommendations" in risk_assessment:
        recommendations = risk_assessment["recommendations"]
        assert isinstance(recommendations, list), "recommendations should be a list"
        if len(recommendations) > 0:
            for rec in recommendations[:3]:  # Check first 3 recommendations
                assert "priority" in rec, "Each recommendation should have a 'priority' field"
                assert "description" in rec, "Each recommendation should have a 'description' field"
    
    # Verify trends if present
    if "trends" in risk_assessment:
        trends = risk_assessment["trends"]
        assert isinstance(trends, dict), "trends should be a dictionary"
        trend_fields = ["vulnerability_trend", "risk_score_trend"]
        for field in trend_fields:
            if field in trends:
                assert isinstance(trends[field], (str, dict)), f"Trend field {field} should be string or dict"
    
    # Log the structure of the risk assessment for debugging
    print(f"Example risk assessment structure: {risk_assessment}")
    
    # Verify that the overall risk score is within expected range
    overall_score = risk_assessment["overall_risk_score"]
    assert isinstance(overall_score, (int, float)), "overall_risk_score should be a number"
    assert 0 <= overall_score <= 10, "overall_risk_score should be between 0 and 10"
    
    print(f"Successfully generated risk assessment with overall score: {overall_score}")

    return True