# 3-test_query_target_options.py

async def test_asset_group_enumeration_options(zerg_state=None):
    """Test Qualys asset group enumeration by way of query target options"""
    print("Attempting to authenticate using Qualys connector")

    assert zerg_state, "this test requires valid zerg_state"

    qualys_url = zerg_state.get("qualys_url").get("value")
    qualys_username = zerg_state.get("qualys_username").get("value")
    qualys_password = zerg_state.get("qualys_password").get("value")

    from connectors.qualys.config import QualysConnectorConfig
    from connectors.qualys.connector import QualysConnector

    from connectors.config import ConnectorConfig
    from connectors.query_target_options import ConnectorQueryTargetOptions
    from connectors.connector import Connector

    config = QualysConnectorConfig(
        url=qualys_url,
        username=qualys_username,
        password=qualys_password,
    )
    assert isinstance(config, ConnectorConfig), "QualysConnectorConfig should be of type ConnectorConfig"

    connector = QualysConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "QualysConnector should be of type Connector"

    qualys_query_target_options = await connector.get_query_target_options()
    assert isinstance(qualys_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    assert qualys_query_target_options, "Failed to retrieve query target options"

    print(f"Qualys query target option definitions: {qualys_query_target_options.definitions}")
    print(f"Qualys query target option selectors: {qualys_query_target_options.selectors}")

    return True