# 6-test_get_vulnerabilities.py

async def test_get_vulnerabilities(zerg_state=None):
    """Test Rapid7 vulnerability details retrieval"""
    print("Testing Rapid7 vulnerability details retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    rapid7_api_url = zerg_state.get("rapid7_api_url").get("value")
    rapid7_username = zerg_state.get("rapid7_username").get("value")
    rapid7_password = zerg_state.get("rapid7_password").get("value")

    from connectors.rapid7.config import Rapid7ConnectorConfig
    from connectors.rapid7.connector import Rapid7Connector
    from connectors.rapid7.target import Rapid7Target

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = Rapid7ConnectorConfig(
        api_url=rapid7_api_url,
        username=rapid7_username,
        password=rapid7_password
    )
    assert isinstance(config, ConnectorConfig), "Rapid7ConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = Rapid7Connector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "Rapid7Connector should be of type Connector"

    # get query target options
    rapid7_query_target_options = await connector.get_query_target_options()
    assert isinstance(rapid7_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select vulnerabilities data source
    data_source_selector = None
    for selector in rapid7_query_target_options.selectors:
        if selector.type == 'data_sources':  
            data_source_selector = selector
            break

    assert data_source_selector, "failed to retrieve data source selector from query target options"
    assert isinstance(data_source_selector.values, list), "data_source_selector values must be a list"
    
    # Find vulnerabilities in available data sources
    vulnerabilities_source = None
    for source in data_source_selector.values:
        if 'vulnerabilit' in source.lower():
            vulnerabilities_source = source
            break
    
    assert vulnerabilities_source, "Vulnerabilities data source not found in available options"
    print(f"Selecting vulnerabilities data source: {vulnerabilities_source}")

    # set up the target with vulnerabilities data source
    target = Rapid7Target(data_sources=[vulnerabilities_source])
    assert isinstance(target, ConnectorTargetInterface), "Rapid7Target should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_rapid7_vulnerabilities tool and execute it
    get_rapid7_vulnerabilities_tool = next(tool for tool in tools if tool.name == "get_rapid7_vulnerabilities")
    vulnerabilities_result = await get_rapid7_vulnerabilities_tool.execute()
    vulnerabilities_data = vulnerabilities_result.result

    print("Type of returned vulnerabilities data:", type(vulnerabilities_data))
    print(f"Vulnerabilities count: {len(vulnerabilities_data)} sample: {str(vulnerabilities_data)[:200]}")

    # Verify that vulnerabilities_data is a list
    assert isinstance(vulnerabilities_data, list), "Vulnerabilities data should be a list"
    assert len(vulnerabilities_data) > 0, "Vulnerabilities data should not be empty"
    
    # Limit the number of vulnerabilities to check if there are many
    vulns_to_check = vulnerabilities_data[:5] if len(vulnerabilities_data) > 5 else vulnerabilities_data
    
    # Verify structure of each vulnerability entry
    for vuln in vulns_to_check:
        # Verify essential vulnerability fields
        assert "id" in vuln, "Each vulnerability should have an 'id' field"
        assert "title" in vuln, "Each vulnerability should have a 'title' field"
        assert "severity" in vuln, "Each vulnerability should have a 'severity' field"
        
        # Verify severity is valid
        valid_severities = ["critical", "severe", "moderate", "normal"]
        severity = vuln["severity"].lower()
        assert severity in valid_severities, f"Invalid severity level: {severity}"
        
        # Verify title is not empty
        assert vuln["title"].strip(), "Vulnerability title should not be empty"
        
        # Check for additional vulnerability fields
        vuln_fields = ["description", "solution", "cvss", "cve", "published", "added", "modified"]
        present_fields = [field for field in vuln_fields if field in vuln]
        
        print(f"Vulnerability {vuln['id']} ({vuln['severity']}) contains: {', '.join(present_fields)}")
        
        # If CVSS is present, validate structure
        if "cvss" in vuln:
            cvss = vuln["cvss"]
            if isinstance(cvss, dict):
                # Check for CVSS score
                if "score" in cvss:
                    score = cvss["score"]
                    assert isinstance(score, (int, float)), "CVSS score should be numeric"
                    assert 0.0 <= score <= 10.0, f"CVSS score should be between 0.0 and 10.0: {score}"
        
        # If CVE is present, validate format
        if "cve" in vuln:
            cve_list = vuln["cve"]
            if isinstance(cve_list, list) and cve_list:
                for cve in cve_list:
                    if isinstance(cve, str) and cve.startswith("CVE-"):
                        assert len(cve.split("-")) >= 3, f"Invalid CVE format: {cve}"
        
        # If solution is present, validate it's not empty
        if "solution" in vuln:
            solution = vuln["solution"]
            assert solution and solution.strip(), "Solution should not be empty"
        
        # Log the structure of the first vulnerability for debugging
        if vuln == vulns_to_check[0]:
            print(f"Example vulnerability structure: {vuln}")

    print(f"Successfully retrieved and validated {len(vulnerabilities_data)} Rapid7 vulnerabilities")

    return True