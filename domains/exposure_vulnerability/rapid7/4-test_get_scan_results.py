# 4-test_get_scan_results.py

async def test_get_scan_results(zerg_state=None):
    """Test Rapid7 vulnerability scan results retrieval"""
    print("Testing Rapid7 vulnerability scan results retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    rapid7_api_url = zerg_state.get("rapid7_api_url").get("value")
    rapid7_username = zerg_state.get("rapid7_username").get("value")
    rapid7_password = zerg_state.get("rapid7_password").get("value")

    from connectors.rapid7.config import Rapid7ConnectorConfig
    from connectors.rapid7.connector import Rapid7Connector
    from connectors.rapid7.target import Rapid7Target

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = Rapid7ConnectorConfig(
        api_url=rapid7_api_url,
        username=rapid7_username,
        password=rapid7_password
    )
    assert isinstance(config, ConnectorConfig), "Rapid7ConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = Rapid7Connector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "Rapid7Connector should be of type Connector"

    # get query target options
    rapid7_query_target_options = await connector.get_query_target_options()
    assert isinstance(rapid7_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select scans data source
    data_source_selector = None
    for selector in rapid7_query_target_options.selectors:
        if selector.type == 'data_sources':  
            data_source_selector = selector
            break

    assert data_source_selector, "failed to retrieve data source selector from query target options"
    assert isinstance(data_source_selector.values, list), "data_source_selector values must be a list"
    
    # Find scans in available data sources
    scans_source = None
    for source in data_source_selector.values:
        if 'scan' in source.lower():
            scans_source = source
            break
    
    assert scans_source, "Scans data source not found in available options"
    print(f"Selecting scans data source: {scans_source}")

    # set up the target with scans data source
    target = Rapid7Target(data_sources=[scans_source])
    assert isinstance(target, ConnectorTargetInterface), "Rapid7Target should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_rapid7_scan_results tool
    rapid7_get_scan_results_tool = next(tool for tool in tools if tool.name == "get_rapid7_scan_results")
    scan_results_result = await rapid7_get_scan_results_tool.execute()
    scan_results_data = scan_results_result.result

    print("Type of returned scan results data:", type(scan_results_data))
    print(f"Scan results count: {len(scan_results_data)} sample: {str(scan_results_data)[:200]}")

    # Verify that scan_results_data is a list
    assert isinstance(scan_results_data, list), "Scan results data should be a list"
    assert len(scan_results_data) > 0, "Scan results data should not be empty"
    
    # Limit the number of scan results to check if there are many
    results_to_check = scan_results_data[:5] if len(scan_results_data) > 5 else scan_results_data
    
    # Verify structure of each scan result entry
    for result in results_to_check:
        # Verify essential scan result fields
        assert "id" in result, "Each scan result should have an 'id' field"
        assert "status" in result, "Each scan result should have a 'status' field"
        assert "startTime" in result, "Each scan result should have a 'startTime' field"
        
        # Verify scan status is valid
        valid_statuses = ["complete", "running", "stopped", "error", "paused", "aborted", "unknown"]
        status = result["status"].lower()
        assert any(valid_status in status for valid_status in valid_statuses), f"Invalid scan status: {status}"
        
        # Check for additional scan fields
        scan_fields = ["endTime", "duration", "vulnerabilities", "assets", "sites"]
        present_fields = [field for field in scan_fields if field in result]
        
        print(f"Scan {result['id']} (status: {result['status']}) contains: {', '.join(present_fields)}")
        
        # If vulnerabilities are present, verify structure
        if "vulnerabilities" in result:
            vulnerabilities = result["vulnerabilities"]
            if isinstance(vulnerabilities, dict):
                # Check for vulnerability counts by severity
                severity_fields = ["critical", "severe", "moderate", "total"]
                vuln_fields = [field for field in severity_fields if field in vulnerabilities]
                print(f"Vulnerability counts available: {', '.join(vuln_fields)}")
        
        # Log the structure of the first scan result for debugging
        if result == results_to_check[0]:
            print(f"Example scan result structure: {result}")

    print(f"Successfully retrieved and validated {len(scan_results_data)} Rapid7 scan results")

    return True