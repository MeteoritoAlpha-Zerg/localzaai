# 5-test_get_assets.py

async def test_get_assets(zerg_state=None):
    """Test Rapid7 asset inventory retrieval"""
    print("Testing Rapid7 asset inventory retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    rapid7_api_url = zerg_state.get("rapid7_api_url").get("value")
    rapid7_username = zerg_state.get("rapid7_username").get("value")
    rapid7_password = zerg_state.get("rapid7_password").get("value")

    from connectors.rapid7.config import Rapid7ConnectorConfig
    from connectors.rapid7.connector import Rapid7Connector
    from connectors.rapid7.target import Rapid7Target

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = Rapid7ConnectorConfig(
        api_url=rapid7_api_url,
        username=rapid7_username,
        password=rapid7_password
    )
    assert isinstance(config, ConnectorConfig), "Rapid7ConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = Rapid7Connector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "Rapid7Connector should be of type Connector"

    # get query target options
    rapid7_query_target_options = await connector.get_query_target_options()
    assert isinstance(rapid7_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select assets data source
    data_source_selector = None
    for selector in rapid7_query_target_options.selectors:
        if selector.type == 'data_sources':  
            data_source_selector = selector
            break

    assert data_source_selector, "failed to retrieve data source selector from query target options"
    assert isinstance(data_source_selector.values, list), "data_source_selector values must be a list"
    
    # Find assets in available data sources
    assets_source = None
    for source in data_source_selector.values:
        if 'asset' in source.lower():
            assets_source = source
            break
    
    assert assets_source, "Assets data source not found in available options"
    print(f"Selecting assets data source: {assets_source}")

    # set up the target with assets data source
    target = Rapid7Target(data_sources=[assets_source])
    assert isinstance(target, ConnectorTargetInterface), "Rapid7Target should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_rapid7_assets tool and execute it
    get_rapid7_assets_tool = next(tool for tool in tools if tool.name == "get_rapid7_assets")
    assets_result = await get_rapid7_assets_tool.execute()
    assets_data = assets_result.result

    print("Type of returned assets data:", type(assets_data))
    print(f"Assets count: {len(assets_data)} sample: {str(assets_data)[:200]}")

    # Verify that assets_data is a list
    assert isinstance(assets_data, list), "Assets data should be a list"
    assert len(assets_data) > 0, "Assets data should not be empty"
    
    # Limit the number of assets to check if there are many
    assets_to_check = assets_data[:5] if len(assets_data) > 5 else assets_data
    
    # Verify structure of each asset entry
    for asset in assets_to_check:
        # Verify essential asset fields
        assert "id" in asset, "Each asset should have an 'id' field"
        assert "ip" in asset, "Each asset should have an 'ip' field"
        
        # Verify IP address format (basic validation)
        ip_address = asset["ip"]
        assert isinstance(ip_address, str), "IP address should be a string"
        assert len(ip_address.split('.')) == 4 or ':' in ip_address, f"Invalid IP address format: {ip_address}"
        
        # Check for additional asset fields
        asset_fields = ["hostname", "mac", "os", "riskScore", "vulnerabilities", "services"]
        present_fields = [field for field in asset_fields if field in asset]
        
        print(f"Asset {asset['id']} (IP: {asset['ip']}) contains: {', '.join(present_fields)}")
        
        # If risk score is present, validate it
        if "riskScore" in asset:
            risk_score = asset["riskScore"]
            assert isinstance(risk_score, (int, float)), "Risk score should be numeric"
            assert 0 <= risk_score <= 1000, f"Risk score should be between 0 and 1000: {risk_score}"
        
        # If vulnerability counts are present, validate structure
        if "vulnerabilities" in asset:
            vulnerabilities = asset["vulnerabilities"]
            if isinstance(vulnerabilities, dict):
                # Check for vulnerability counts
                vuln_fields = ["critical", "severe", "moderate", "total"]
                present_vuln_fields = [field for field in vuln_fields if field in vulnerabilities]
                if present_vuln_fields:
                    print(f"Asset vulnerability counts: {', '.join(present_vuln_fields)}")
        
        # If OS information is present, validate it's not empty
        if "os" in asset:
            os_info = asset["os"]
            assert os_info and os_info.strip(), "OS information should not be empty"
        
        # Log the structure of the first asset for debugging
        if asset == assets_to_check[0]:
            print(f"Example asset structure: {asset}")

    print(f"Successfully retrieved and validated {len(assets_data)} Rapid7 assets")

    return True