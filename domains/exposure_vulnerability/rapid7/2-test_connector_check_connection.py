# 2-test_connector_check_connection.py

async def test_connector_check_connection(zerg_state=None):
    """Test whether connector can successfully connect to Rapid7 APIs"""
    print("Testing Rapid7 connector connection")

    assert zerg_state, "this test requires valid zerg_state"

    rapid7_api_url = zerg_state.get("rapid7_api_url").get("value")
    rapid7_username = zerg_state.get("rapid7_username").get("value")
    rapid7_password = zerg_state.get("rapid7_password").get("value")

    from connectors.rapid7.config import Rapid7ConnectorConfig
    from connectors.rapid7.connector import Rapid7Connector
    
    from connectors.config import ConnectorConfig
    from connectors.connector import Connector

    config = Rapid7ConnectorConfig(
        api_url=rapid7_api_url,
        username=rapid7_username,
        password=rapid7_password,
    )
    assert isinstance(config, ConnectorConfig), "Rapid7ConnectorConfig should be of type ConnectorConfig"

    # initialize the connector
    connector = Rapid7Connector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "Rapid7Connector should be of type Connector"

    connection_valid = await connector.check_connection()

    if not isinstance(connection_valid, bool) or not connection_valid:
        raise Exception("check_connection did not return True")

    return True