# 3-test_query_target_options.py

async def test_scan_asset_enumeration_options(zerg_state=None):
    """Test Tenable scan and asset enumeration by way of query target options"""
    print("Attempting to authenticate using Tenable connector")

    assert zerg_state, "this test requires valid zerg_state"

    tenable_access_key = zerg_state.get("tenable_access_key").get("value")
    tenable_secret_key = zerg_state.get("tenable_secret_key").get("value")
    tenable_base_url = zerg_state.get("tenable_base_url").get("value")

    from connectors.tenable.config import TenableConnectorConfig
    from connectors.tenable.connector import TenableConnector

    from connectors.config import ConnectorConfig
    from connectors.query_target_options import ConnectorQueryTargetOptions
    from connectors.connector import Connector

    config = TenableConnectorConfig(
        access_key=tenable_access_key,
        secret_key=tenable_secret_key,
        base_url=tenable_base_url,
    )
    assert isinstance(config, ConnectorConfig), "TenableConnectorConfig should be of type ConnectorConfig"

    connector = TenableConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TenableConnector should be of type Connector"

    tenable_query_target_options = await connector.get_query_target_options()
    assert isinstance(tenable_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    assert tenable_query_target_options, "Failed to retrieve query target options"

    print(f"Tenable query target option definitions: {tenable_query_target_options.definitions}")
    print(f"Tenable query target option selectors: {tenable_query_target_options.selectors}")

    return True