# 4-test_list_scans.py

async def test_list_scans(zerg_state=None):
    """Test Tenable scan enumeration by way of connector tools"""
    print("Testing Tenable scan listing")

    assert zerg_state, "this test requires valid zerg_state"

    tenable_access_key = zerg_state.get("tenable_access_key").get("value")
    tenable_secret_key = zerg_state.get("tenable_secret_key").get("value")
    tenable_base_url = zerg_state.get("tenable_base_url").get("value")

    from connectors.tenable.config import TenableConnectorConfig
    from connectors.tenable.connector import TenableConnector
    from connectors.tenable.target import TenableTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions
    
    # set up the config
    config = TenableConnectorConfig(
        access_key=tenable_access_key,
        secret_key=tenable_secret_key,
        base_url=tenable_base_url
    )
    assert isinstance(config, ConnectorConfig), "TenableConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = TenableConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TenableConnector should be of type Connector"

    # get query target options
    tenable_query_target_options = await connector.get_query_target_options()
    assert isinstance(tenable_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select scans to target
    scan_selector = None
    for selector in tenable_query_target_options.selectors:
        if selector.type == 'scan_ids':  
            scan_selector = selector
            break

    assert scan_selector, "failed to retrieve scan selector from query target options"

    # grab the first two scans 
    num_scans = 2
    assert isinstance(scan_selector.values, list), "scan_selector values must be a list"
    scan_ids = scan_selector.values[:num_scans] if scan_selector.values else None
    print(f"Selecting scan IDs: {scan_ids}")

    assert scan_ids, f"failed to retrieve {num_scans} scan IDs from scan selector"

    # set up the target with scan IDs
    target = TenableTarget(scan_ids=scan_ids)
    assert isinstance(target, ConnectorTargetInterface), "TenableTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_tenable_scans tool
    tenable_get_scans_tool = next(tool for tool in tools if tool.name == "get_tenable_scans")
    tenable_scans_result = await tenable_get_scans_tool.execute()
    tenable_scans = tenable_scans_result.result

    print("Type of returned tenable_scans:", type(tenable_scans))
    print(f"len scans: {len(tenable_scans)} scans: {str(tenable_scans)[:200]}")

    # Verify that tenable_scans is a list
    assert isinstance(tenable_scans, list), "tenable_scans should be a list"
    assert len(tenable_scans) > 0, "tenable_scans should not be empty"
    assert len(tenable_scans) == num_scans, f"tenable_scans should have {num_scans} entries"
    
    # Verify structure of each scan object
    for scan in tenable_scans:
        assert "id" in scan, "Each scan should have an 'id' field"
        assert scan["id"] in scan_ids, f"Scan ID {scan['id']} is not in the requested scan_ids"
        
        # Verify essential Tenable scan fields
        assert "name" in scan, "Each scan should have a 'name' field"
        assert "status" in scan, "Each scan should have a 'status' field"
        
        # Check for additional descriptive fields
        descriptive_fields = ["owner", "creation_date", "last_modification_date", "uuid", "policy_id"]
        present_fields = [field for field in descriptive_fields if field in scan]
        
        print(f"Scan {scan['id']} contains these descriptive fields: {', '.join(present_fields)}")
        
        # Verify scan status is valid
        valid_statuses = ["completed", "running", "stopped", "canceled", "imported", "pending"]
        if "status" in scan:
            assert scan["status"] in valid_statuses, f"Scan status {scan['status']} should be valid"
        
        # Log the full structure of the first scan
        if scan == tenable_scans[0]:
            print(f"Example scan structure: {scan}")

    print(f"Successfully retrieved and validated {len(tenable_scans)} Tenable scans")

    return True