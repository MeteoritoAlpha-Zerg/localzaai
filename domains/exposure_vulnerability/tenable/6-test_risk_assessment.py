# 6-test_risk_assessment.py

async def test_risk_assessment(zerg_state=None):
    """Test Tenable risk assessment and security posture analysis"""
    print("Testing Tenable risk assessment and security posture analysis")

    assert zerg_state, "this test requires valid zerg_state"

    tenable_access_key = zerg_state.get("tenable_access_key").get("value")
    tenable_secret_key = zerg_state.get("tenable_secret_key").get("value")
    tenable_base_url = zerg_state.get("tenable_base_url").get("value")

    from connectors.tenable.config import TenableConnectorConfig
    from connectors.tenable.connector import TenableConnector
    from connectors.tenable.target import TenableTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = TenableConnectorConfig(
        access_key=tenable_access_key,
        secret_key=tenable_secret_key,
        base_url=tenable_base_url
    )
    assert isinstance(config, ConnectorConfig), "TenableConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = TenableConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TenableConnector should be of type Connector"

    # get query target options to find available assets/scans
    tenable_query_target_options = await connector.get_query_target_options()
    assert isinstance(tenable_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select asset group or scan to target for risk assessment
    asset_selector = None
    for selector in tenable_query_target_options.selectors:
        if selector.type == 'asset_groups':  
            asset_selector = selector
            break

    # If no asset groups, fall back to scan IDs
    if not asset_selector:
        for selector in tenable_query_target_options.selectors:
            if selector.type == 'scan_ids':  
                asset_selector = selector
                break

    assert asset_selector, "failed to retrieve asset or scan selector from query target options"

    assert isinstance(asset_selector.values, list), "asset_selector values must be a list"
    target_identifier = asset_selector.values[0] if asset_selector.values else None
    print(f"Using target for risk assessment: {target_identifier}")

    assert target_identifier, f"failed to retrieve target identifier from selector"

    # set up the target 
    if asset_selector.type == 'asset_groups':
        target = TenableTarget(asset_groups=[target_identifier])
    else:
        target = TenableTarget(scan_ids=[target_identifier])
    assert isinstance(target, ConnectorTargetInterface), "TenableTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_risk_assessment tool and execute risk analysis
    get_risk_assessment_tool = next(tool for tool in tools if tool.name == "get_risk_assessment")
    
    # Execute risk assessment
    if asset_selector.type == 'asset_groups':
        risk_result = await get_risk_assessment_tool.execute(asset_group=target_identifier)
    else:
        risk_result = await get_risk_assessment_tool.execute(scan_id=target_identifier)
    
    risk_assessment = risk_result.result

    print("Type of returned risk_assessment:", type(risk_assessment))
    print(f"Risk assessment preview: {str(risk_assessment)[:200]}")

    # Verify that risk_assessment contains structured data
    assert risk_assessment is not None, "risk_assessment should not be None"
    
    # Risk assessment could be a dictionary with metrics or a list of risk items
    if isinstance(risk_assessment, dict):
        # Check for common risk assessment fields
        expected_fields = ["risk_score", "critical_count", "high_count", "medium_count", "low_count", "info_count"]
        present_fields = [field for field in expected_fields if field in risk_assessment]
        
        assert len(present_fields) > 0, f"Risk assessment should contain at least one of these fields: {expected_fields}"
        print(f"Risk assessment contains these fields: {', '.join(present_fields)}")
        
        # Verify numeric fields are actually numeric
        for field in present_fields:
            if "count" in field or "score" in field:
                assert isinstance(risk_assessment[field], (int, float)), f"Field {field} should be numeric"
        
        # Log the full structure for debugging
        print(f"Risk assessment structure: {risk_assessment}")
        
    elif isinstance(risk_assessment, list):
        assert len(risk_assessment) > 0, "Risk assessment list should not be empty"
        
        # Check structure of risk items
        sample_item = risk_assessment[0]
        assert isinstance(sample_item, dict), "Risk assessment items should be dictionaries"
        
        # Look for common risk item fields
        item_fields = ["asset", "risk_score", "severity", "vulnerability_count"]
        present_item_fields = [field for field in item_fields if field in sample_item]
        
        print(f"Risk assessment items contain these fields: {', '.join(present_item_fields)}")
        print(f"Example risk item: {sample_item}")
        
    else:
        # Risk assessment could be in other formats, ensure it's meaningful
        assert str(risk_assessment).strip() != "", "Risk assessment should contain meaningful data"

    print(f"Successfully retrieved and validated risk assessment data")

    return True