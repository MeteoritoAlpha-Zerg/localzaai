# 5-test_vulnerability_data.py

async def test_vulnerability_data(zerg_state=None):
    """Test Tenable vulnerability data retrieval"""
    print("Testing Tenable vulnerability data retrieval")

    assert zerg_state, "this test requires valid zerg_state"

    tenable_access_key = zerg_state.get("tenable_access_key").get("value")
    tenable_secret_key = zerg_state.get("tenable_secret_key").get("value")
    tenable_base_url = zerg_state.get("tenable_base_url").get("value")

    from connectors.tenable.config import TenableConnectorConfig
    from connectors.tenable.connector import TenableConnector
    from connectors.tenable.target import TenableTarget

    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    # set up the config
    config = TenableConnectorConfig(
        access_key=tenable_access_key,
        secret_key=tenable_secret_key,
        base_url=tenable_base_url
    )
    assert isinstance(config, ConnectorConfig), "TenableConnectorConfig should be of type ConnectorConfig"

    # set up the connector
    connector = TenableConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "TenableConnector should be of type Connector"

    # get query target options
    tenable_query_target_options = await connector.get_query_target_options()
    assert isinstance(tenable_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    # select scan to target
    scan_selector = None
    for selector in tenable_query_target_options.selectors:
        if selector.type == 'scan_ids':  
            scan_selector = selector
            break

    assert scan_selector, "failed to retrieve scan selector from query target options"

    assert isinstance(scan_selector.values, list), "scan_selector values must be a list"
    scan_id = scan_selector.values[0] if scan_selector.values else None
    print(f"Selecting scan ID: {scan_id}")

    assert scan_id, f"failed to retrieve scan ID from scan selector"

    # set up the target with scan ID
    target = TenableTarget(scan_ids=[scan_id])
    assert isinstance(target, ConnectorTargetInterface), "TenableTarget should be of type ConnectorTargetInterface"

    # get tools
    tools = await connector.get_tools(
        target=target
    )
    assert isinstance(tools, list), "Tools response is not a list"

    # grab the get_vulnerability_data tool and execute it with scan ID
    get_vuln_data_tool = next(tool for tool in tools if tool.name == "get_vulnerability_data")
    vuln_data_result = await get_vuln_data_tool.execute(scan_id=scan_id)
    vulnerability_data = vuln_data_result.result

    print("Type of returned vulnerability_data:", type(vulnerability_data))
    print(f"len vulnerabilities: {len(vulnerability_data)} vulns: {str(vulnerability_data)[:200]}")

    # Verify that vulnerability_data is a list
    assert isinstance(vulnerability_data, list), "vulnerability_data should be a list"
    assert len(vulnerability_data) > 0, "vulnerability_data should not be empty"
    
    # Limit the number of vulnerabilities to check if there are many
    vulns_to_check = vulnerability_data[:5] if len(vulnerability_data) > 5 else vulnerability_data
    
    # Verify structure of each vulnerability object
    for vuln in vulns_to_check:
        # Verify vulnerability is a dictionary
        assert isinstance(vuln, dict), "Each vulnerability should be a dictionary"
        
        # Verify essential vulnerability fields
        assert "plugin_id" in vuln, "Each vulnerability should have a 'plugin_id' field"
        assert "severity" in vuln, "Each vulnerability should have a 'severity' field"
        
        # Check for common vulnerability fields
        common_fields = ["plugin_name", "count", "vuln_index", "severity_index"]
        present_common = [field for field in common_fields if field in vuln]
        
        # Verify severity is valid
        valid_severities = [0, 1, 2, 3, 4]  # info, low, medium, high, critical
        if isinstance(vuln["severity"], int):
            assert vuln["severity"] in valid_severities, f"Severity {vuln['severity']} should be valid (0-4)"
        
        # Check for CVE and CVSS information if present
        optional_fields = ["cve", "cvss_base_score", "cvss_vector", "description"]
        present_optional = [field for field in optional_fields if field in vuln]
        
        print(f"Vulnerability {vuln['plugin_id']} contains these fields: {', '.join(present_common + present_optional)}")
        
        # Log the structure of the first vulnerability for debugging
        if vuln == vulns_to_check[0]:
            print(f"Example vulnerability structure: {vuln}")

    print(f"Successfully retrieved and validated {len(vulnerability_data)} vulnerability findings")

    return True