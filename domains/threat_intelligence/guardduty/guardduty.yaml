# GuardDuty
name: "guardduty"
category: "Threat Detection"
description: "Create an API integration with AWS GuardDuty per its API specification"

specs:
  - description: |
      The GuardDuty Connector is able to authenticate with AWS GuardDuty per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The GuardDuty connector is able to authenticate properly with an AWS account;
      The GuardDuty connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      GuardDuty Connector is able to list detectors per user of get_query_target_options
    preconditions: |
      A valid authenticated session with AWS GuardDuty
    postconditions: |
      Connector successfully enumerates detectors to populate the target options of the GuardDutyTarget;

  - description: |
      GuardDuty Connector is able to list findings for selected detectors
    preconditions: |
      A valid authenticated session with AWS GuardDuty
    postconditions: |
      Per the configuration as contained in GuardDutyTarget as provided to GuardDutyConnectorTools, it is possible
      to get a list of findings along with their respective details and severity information
      as may be relevant;
      Ensure that the respective get_guardduty_findings function in the GuardDutyConnectorTools is not hardcoding
      any return values;

  - description: |
      GuardDuty Connector is able to retrieve detailed finding information
    preconditions: |
      A valid authenticated session with AWS GuardDuty
    postconditions: |
      Connector successfully retrieves detailed information for a specific finding ID provided as a param
      to the get finding details tool

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates GuardDuty detectors
    preconditions: |
      Existing AWS credentials with GuardDuty access
    postconditions: |
      Possible to retrieve the list of GuardDuty detectors using get_query_target_options
      and to then use this to set the options in a given GuardDutyConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real detectors, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List GuardDuty findings for selected detectors in target
    preconditions: |
      Existing AWS credentials with GuardDuty access
    postconditions: |
      Possible to retrieve the list of GuardDuty findings by way of connector tools;
      This list includes details of the findings to be listed in results; 
      These must be real findings, and not simulated;
    function_to_run: !python/file 4-test_list_findings.py

  - description: |
      Retrieve detailed information for a specific finding ID
    preconditions: |
      Existing AWS credentials with GuardDuty access
    postconditions: |
      Possible to retrieve detailed information for the selected GuardDuty finding ID as passed as a param to the connector tools;
      The response includes complete finding details including affected resources, actor information, and remediation recommendations; 
      These must be real finding details, and not simulated;
    function_to_run: !python/file 5-test_finding_details.py

  # - description: |
  #     Filter GuardDuty findings by severity and timestamp
  #   preconditions: |
  #     Existing AWS credentials with GuardDuty access
  #   postconditions: |
  #     Possible to filter GuardDuty findings by severity levels (Low, Medium, High) and time ranges;
  #     Results are correctly filtered according to the specified criteria;
  #     Pagination works correctly for large result sets;
  #   function_to_run: !python/file 6-test_findings_filtering.py

connector_references:  []
  - description: "GuardDuty logo"
    file_path: "assets/guardduty.png"
    environment_path: "connectors/guardduty/guardduty.png"
    format: "png"
    required: true
    read_only: true

user_references: []

configs:
  - name: "aws_region"
    description: "The AWS region to connect to, note this should be included as region in GuardDutyConnectorConfig"
    value: !env/var 

  - name: "aws_access_key_id"
    description: "AWS Access Key ID for authenticating with AWS services, note this should be included as access_key_id in GuardDutyConnectorConfig"
    value: !env/var 

  - name: "aws_secret_access_key"
    description: "AWS Secret Access Key for authenticating with AWS services, note this should be included as secret_access_key in GuardDutyConnectorConfig"
    value: !env/var 

  # - name: "aws_session_token"
  #   description: "Optional AWS Session Token for temporary credentials"
  #   value: !env/var 

  - name: "guardduty_api_request_timeout"
    description: "Request timeout in seconds"
    value: 30

  - name: "guardduty_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "guardduty_findings_max_results"
    description: "Maximum number of findings to return per page"
    value: 50

  - name: "guardduty_findings_days_back"
    description: "Default number of days to look back when querying findings"
    value: 30

  - name: "additional_considerations"
    description: |
      Additional considerations for the generation of specifically the GuardDuty connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "GuarddutyConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which log groups are valid for the target, and then use the target to select which log groups to actually pull data from for the respective tools as shown in the unit tests",
      "ensure proper pagination handling when retrieving large sets of logs or metrics data"
    ]

  # - name: "additional_considerations"
  #   description: |
  #     Additional considerations for the generation of specifically the GuardDuty connector 
  #     with regards to the connector framework as provided - please keep these strongly in mind
  #   value: [
  #     "GuardDutyConnectorConfig should deriv