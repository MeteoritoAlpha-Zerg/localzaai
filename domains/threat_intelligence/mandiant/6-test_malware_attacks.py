# 6-test_malware_attacks.py

async def test_malware_attacks(zerg_state=None):
    """Test Mandiant malware families and attack patterns retrieval"""
    print("Attempting to retrieve malware and attack data using Mandiant connector")

    assert zerg_state, "this test requires valid zerg_state"

    mandiant_url = zerg_state.get("mandiant_url").get("value")
    mandiant_api_key = zerg_state.get("mandiant_api_key").get("value")
    mandiant_secret_key = zerg_state.get("mandiant_secret_key").get("value")

    from connectors.mandiant.config import MandiantConnectorConfig
    from connectors.mandiant.connector import MandiantConnector
    from connectors.mandiant.tools import MandiantConnectorTools
    from connectors.mandiant.target import MandiantTarget
    from connectors.config import ConnectorConfig
    from connectors.connector import Connector, ConnectorTargetInterface
    from connectors.query_target_options import ConnectorQueryTargetOptions

    config = MandiantConnectorConfig(
        url=mandiant_url,
        api_key=mandiant_api_key,
        secret_key=mandiant_secret_key,
    )
    assert isinstance(config, ConnectorConfig), "MandiantConnectorConfig should be of type ConnectorConfig"

    connector = MandiantConnector
    await connector.initialize(
        config=config,
        user_id="test_user_id",
        encryption_key="test_enc_key"
    )
    assert isinstance(connector, Connector), "MandiantConnector should be of type Connector"

    mandiant_query_target_options = await connector.get_query_target_options()
    assert isinstance(mandiant_query_target_options, ConnectorQueryTargetOptions), "query target options should be of type ConnectorQueryTargetOptions"

    threat_actor_selector = None
    for selector in mandiant_query_target_options.selectors:
        if selector.type == 'threat_actor_ids':  
            threat_actor_selector = selector
            break

    assert threat_actor_selector, "failed to retrieve threat actor selector from query target options"

    assert isinstance(threat_actor_selector.values, list), "threat_actor_selector values must be a list"
    threat_actor_id = threat_actor_selector.values[0] if threat_actor_selector.values else None
    print(f"Selecting threat actor ID: {threat_actor_id}")

    assert threat_actor_id, f"failed to retrieve threat actor ID from threat actor selector"

    target = MandiantTarget(threat_actor_ids=[threat_actor_id])
    assert isinstance(target, ConnectorTargetInterface), "MandiantTarget should be of type ConnectorTargetInterface"

    tools = await connector.get_tools(target=target)
    assert isinstance(tools, list), "Tools response is not a list"

    # Test 1: Get malware families
    get_mandiant_malware_tool = next(tool for tool in tools if tool.name == "get_mandiant_malware")
    mandiant_malware_result = await get_mandiant_malware_tool.execute(limit=15)
    mandiant_malware = mandiant_malware_result.result

    print("Type of returned mandiant_malware:", type(mandiant_malware))
    print(f"len malware families: {len(mandiant_malware)} families: {str(mandiant_malware)[:200]}")

    assert isinstance(mandiant_malware, list), "mandiant_malware should be a list"
    
    if len(mandiant_malware) > 0:
        malware_to_check = mandiant_malware[:5] if len(mandiant_malware) > 5 else mandiant_malware
        
        for malware in malware_to_check:
            assert "id" in malware, "Each malware should have an 'id' field"
            assert "name" in malware, "Each malware should have a 'name' field"
            assert "family" in malware, "Each malware should have a 'family' field"
            
            malware_fields = ["aliases", "capabilities", "operating_systems", "yara_rules", "attributed_actors"]
            present_malware_fields = [field for field in malware_fields if field in malware]
            
            print(f"Malware {malware['name']} ({malware['family']}) contains these fields: {', '.join(present_malware_fields)}")

        print(f"Successfully retrieved and validated {len(mandiant_malware)} Mandiant malware families")

    # Test 2: Get attack patterns
    get_mandiant_attack_patterns_tool = next(tool for tool in tools if tool.name == "get_mandiant_attack_patterns")
    mandiant_attack_patterns_result = await get_mandiant_attack_patterns_tool.execute(limit=10)
    mandiant_attack_patterns = mandiant_attack_patterns_result.result

    print("Type of returned mandiant_attack_patterns:", type(mandiant_attack_patterns))

    assert isinstance(mandiant_attack_patterns, list), "mandiant_attack_patterns should be a list"
    
    if len(mandiant_attack_patterns) > 0:
        patterns_to_check = mandiant_attack_patterns[:3] if len(mandiant_attack_patterns) > 3 else mandiant_attack_patterns
        
        for pattern in patterns_to_check:
            assert "id" in pattern, "Each attack pattern should have an 'id' field"
            assert "name" in pattern, "Each attack pattern should have a 'name' field"
            assert "kill_chain_phases" in pattern, "Each attack pattern should have 'kill_chain_phases' field"
            
            pattern_fields = ["description", "platforms", "defense_bypassed", "permissions_required", "data_sources"]
            present_pattern_fields = [field for field in pattern_fields if field in pattern]
            
            print(f"Attack pattern {pattern['name']} contains these fields: {', '.join(present_pattern_fields)}")

        print(f"Successfully retrieved and validated {len(mandiant_attack_patterns)} Mandiant attack patterns")

    # Test 3: Get MITRE ATT&CK techniques
    get_mandiant_techniques_tool = next(tool for tool in tools if tool.name == "get_mandiant_techniques")
    mandiant_techniques_result = await get_mandiant_techniques_tool.execute(limit=20)
    mandiant_techniques = mandiant_techniques_result.result

    print("Type of returned mandiant_techniques:", type(mandiant_techniques))

    assert isinstance(mandiant_techniques, list), "mandiant_techniques should be a list"
    
    if len(mandiant_techniques) > 0:
        techniques_to_check = mandiant_techniques[:5] if len(mandiant_techniques) > 5 else mandiant_techniques
        
        for technique in techniques_to_check:
            assert "technique_id" in technique, "Each technique should have a 'technique_id' field"
            assert "name" in technique, "Each technique should have a 'name' field"
            assert "tactic" in technique, "Each technique should have a 'tactic' field"
            
            # Verify MITRE ATT&CK technique ID format
            assert technique["technique_id"].startswith("T"), f"Technique ID {technique['technique_id']} should start with 'T'"
            
            technique_fields = ["description", "platforms", "detection", "mitigation", "references"]
            present_technique_fields = [field for field in technique_fields if field in technique]
            
            print(f"Technique {technique['technique_id']} ({technique['name']}) contains these fields: {', '.join(present_technique_fields)}")

        print(f"Successfully retrieved and validated {len(mandiant_techniques)} Mandiant MITRE ATT&CK techniques")

    # Test 4: Get threat actor tools
    get_mandiant_tools_tool = next(tool for tool in tools if tool.name == "get_mandiant_tools")
    mandiant_tools_result = await get_mandiant_tools_tool.execute(threat_actor_id=threat_actor_id)
    mandiant_tools_data = mandiant_tools_result.result

    print("Type of returned mandiant_tools_data:", type(mandiant_tools_data))

    assert isinstance(mandiant_tools_data, list), "mandiant_tools_data should be a list"
    
    if len(mandiant_tools_data) > 0:
        tools_to_check = mandiant_tools_data[:3] if len(mandiant_tools_data) > 3 else mandiant_tools_data
        
        for tool_data in tools_to_check:
            assert "id" in tool_data, "Each tool should have an 'id' field"
            assert "name" in tool_data, "Each tool should have a 'name' field"
            assert "type" in tool_data, "Each tool should have a 'type' field"
            
            valid_tool_types = ["malware", "tool", "exploit", "backdoor", "trojan", "rootkit"]
            
            tool_fields = ["description", "aliases", "kill_chain_phases", "platforms", "capabilities"]
            present_tool_fields = [field for field in tool_fields if field in tool_data]
            
            print(f"Tool {tool_data['name']} ({tool_data['type']}) contains these fields: {', '.join(present_tool_fields)}")

        print(f"Successfully retrieved and validated {len(mandiant_tools_data)} Mandiant threat actor tools")

    # Test 5: Get indicators associated with malware
    get_mandiant_malware_indicators_tool = next(tool for tool in tools if tool.name == "get_mandiant_malware_indicators")
    
    if len(mandiant_malware) > 0:
        sample_malware_id = mandiant_malware[0]["id"]
        mandiant_malware_indicators_result = await get_mandiant_malware_indicators_tool.execute(
            malware_id=sample_malware_id,
            limit=10
        )
        mandiant_malware_indicators = mandiant_malware_indicators_result.result

        print("Type of returned mandiant_malware_indicators:", type(mandiant_malware_indicators))

        assert isinstance(mandiant_malware_indicators, list), "mandiant_malware_indicators should be a list"
        
        if len(mandiant_malware_indicators) > 0:
            malware_indicators_to_check = mandiant_malware_indicators[:3] if len(mandiant_malware_indicators) > 3 else mandiant_malware_indicators
            
            for indicator in malware_indicators_to_check:
                assert "type" in indicator, "Each malware indicator should have a 'type' field"
                assert "value" in indicator, "Each malware indicator should have a 'value' field"
                
                print(f"Malware indicator: {indicator['type']} - {indicator['value']}")

            print(f"Successfully retrieved and validated {len(mandiant_malware_indicators)} Mandiant malware indicators")

    print("Successfully completed malware families and attack patterns tests")

    return True