name: jira
description: Create an API integration with JIRA per its API specification
category: Project Management

stages:
-   name: verify credentials
    type: before
    description: verifies the credentials as provided to zerg for the connector generation
    preconditions: None
    postconditions: Credentials are verified and valid
    code_to_run: !python/program 'stages/1-verify_credentials.py'
-   name: stage data
    type: before
    description: verifies that data instance has valid data in it and if not populates / stages the data in the target instance
    preconditions: valid credentials per the verify credential stage
    postconditions: Target instance is valid, has valid data per the intents of this specification
    code_to_run: !python/program 'stages/2-stage-data.py'

tests:
-   description: 'List JIRA projects for selected JIRA projects in target

        '
    preconditions: 'An existing JIRA API key and credentials

        '
    postconditions: "Possible to retrieve the list of JIRA projects by way of connector tools;\nThis list includes details\
        \ of the projects to be listed in results; \nThese must be real projects, and not simulated;\n"
    entry_point: test_list_projects
    function_to_run: !python/file '4-test_list_projects.py'
-   description: 'Retrieve issues for selected JIRA project passed as param

        '
    preconditions: 'An existing JIRA API key and credentials

        '
    postconditions: "Possible to retrieve a set of issues for the selected JIRA project as passed as a param to the connector\
        \ tools;\nThis list only includes issues of the target project to be listed in results; \nThese must be real issues,\
        \ and not simulated;\n"
    entry_point: test_issue_retrieval
    function_to_run: !python/file '5-test_issue_retrieval.py'

specs:
-   description: "The JIRA Connector is able to authenticate with JIRA per it's implementation in the code \nenvironment only"
    preconditions: This spec has no strict preconditions
    postconditions: |-
        The JIRA connector is able to authenticate properly with a JIRA instance;
        The JIRA connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;
-   description: JIRA Connector is able to list JIRA projects per user of get_query_target_options
    preconditions: A valid authenticated session with JIRA
    postconditions: Connector successfully enumerates projects to populate the target options of the JIRATarget;
-   description: JIRA Connector is able to list project information
    preconditions: A valid authenticated session with JIRA
    postconditions: |-
        Per the configuration as contained in JIRATarget as provided to JIRAConnectorTools, it is possible
        to get a list of projects along with their respective description and other relevant project details
        as may be relevant;
        Ensure that the respective get_jira_projects function in the JIRAConnectorTools is not hardcoding
        any return values;
-   description: JIRA Connector is able to list issues in a selected project
    preconditions: A valid authenticated session with JIRA
    postconditions: |-
        Connector successfully lists issues for the selected project provided as a param
        to the list issues tool
-   description: |-
        The connector should implement a JIRASecrets class to handle the decrypted API key.
        The get_secrets function should decrypt the StorableSecret and return a JIRASecrets instance.
    preconditions: |-
        A valid JIRAConnectorConfig instance with an encrypted api_key field of type StorableSecret;
        A valid encryption key string that was used to encrypt the StorableSecret;
        The JIRASecrets class extends ConnectorSecretsInterface;
        The _get_secrets function is defined and passed to the Connector constructor;
    postconditions: |-
        The JIRASecrets class has an api_key field of type SecretStr;
        The _get_secrets function successfully decrypts the StorableSecret from config.api_key using the provided encryption key;
        The _get_secrets function returns a JIRASecrets instance with the decrypted API key as a SecretStr;
        If a user_token is provided as a SecretStr, it takes precedence over the config.api_key;
        If neither user_token nor a valid decryptable api_key is available, _get_secrets returns None;
        The decrypted API key in JIRASecrets.api_key can be accessed via get_secret_value() method for use in authentication headers;
        The JIRASecrets instance is properly typed and can be passed to tools and connection check functions;

references:
-   file_path: domains/case_management/jira/jira.svg
    environment_path: connectors/jira/connector/jira.svg
    description: JIRA SVG logo
    format: svg
    required: true
    read_only: true

configs:
-   name: jira_url
    value: []
    description: The base URL of the JIRA instance, note this should be included as url in JIRAConnectorConfig
-   name: jira_api_token
    value: []
    description: "API Token for authenticating with JIRA, stored as a StorableSecret in JIRAConnectorConfig.api_key field;\
        \ \nThis will be encrypted using StorableSecret and accessed via the secrets mechanism\n"
-   name: jira_email
    value: []
    description: Email address for authenticating with JIRA, note this should be included as email in JIRAConnectorConfig
-   name: jira_api_request_timeout
    value: 30
    description: Request timeout in seconds
-   name: jira_api_max_retries
    value: 3
    description: Number of times to retry API requests upon failure
-   name: connector_module
    value: jira
    description: name of connector module
-   name: connector_name
    value: JIRA
    description: name of connector
-   name: selectors
    value:
        project_keys:
            target: project
            __source_file__: domains/case_management/jira/jira.yaml
        __source_file__: domains/case_management/jira/jira.yaml
    description: supported data connector selectors for use with quer_target_options
-   name: expected_tools
    value:
    - get_jira_projects
    - get_jira_issues
    description: supported tools as expected by the data connector generation
-   name: additional considerations
    value:
    - JIRAConnectorConfig should dervice from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig
        config
    - authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)
    - utilize the query target options to determine which projects are valid for the target, and then use the target to select
        which projects to actually pull data from for the respective tools as shown in the unit tests
    description: "Additional considerations for the generation of specifically the JIRA connector \nwith regards to the connector\
        \ framework as provided - please keep these strongly in mind\n"

metadata:
    agent_uuid: 368ff145420e46c385d1ce1d92f341b8
    status: IDLE
    max_depth: 500
    export_timestamp: '2025-08-27 21:10:02.621768'
    environment_type: FSEnvironment
    environment_name: fs_environment
    environment_root: /tmp/zerg/agent_workspace_y0o252jr/environment
    workspace_path: ''
    workspace_files_count: 0
