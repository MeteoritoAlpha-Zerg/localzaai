# Jira
name: "jira"
category: "Project Management"
description: "Create an API integration with JIRA per its API specification"

stages:
  - name: verify credentials
    type: before
    description: verifies the credentials as provided to zerg for the connector generation
    preconditions: None
    postconditions: Credentials are verified and valid
    code_to_run: !python/program stages/1-verify_credentials.py

  - name: stage data
    type: before
    description: verifies that data instance has valid data in it and if not populates / stages the data in the target instance 
    preconditions: valid credentials per the verify credential stage
    postconditions: Target instance is valid, has valid data per the intents of this specification
    code_to_run: !python/program stages/2-stage-data.py

specs:
  - description: |
      The JIRA Connector is able to authenticate with JIRA per it's implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The JIRA connector is able to authenticate properly with a JIRA instance;
      The JIRA connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      JIRA Connector is able to list JIRA projects per user of get_query_target_options
    preconditions: |
      A valid authenticated session with JIRA
    postconditions: |
      Connector successfully enumerates projects to populate the target options of the JIRATarget;

  - description: |
      JIRA Connector is able to list project information
    preconditions: |
      A valid authenticated session with JIRA
    postconditions: |
      Per the configuration as contained in JIRATarget as provided to JIRAConnectorTools, it is possible
      to get a list of projects along with their respective description and other relevant project details
      as may be relevant;
      Ensure that the respective get_jira_projects function in the JIRAConnectorTools is not hardcoding
      any return values;

  - description: |
      JIRA Connector is able to list issues in a selected project
    preconditions: |
      A valid authenticated session with JIRA
    postconditions: |
      Connector successfully lists issues for the selected project provided as a param
      to the list issues tool

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates JIRA project
    preconditions: |
      An existing JIRA API key and credentials
    postconditions: |
      Possible to retrieve the list of JIRA projects using get_query_target_options
      and to then use this to set the options in a given JIRAConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real projects, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List JIRA projects for selected JIRA projects in target
    preconditions: |
      An existing JIRA API key and credentials
    postconditions: |
      Possible to retrieve the list of JIRA projects by way of connector tools;
      This list includes details of the projects to be listed in results; 
      These must be real projects, and not simulated;
    function_to_run: !python/file 4-test_list_projects.py

  - description: |
      Retrieve issues for selected JIRA project passed as param
    preconditions: |
      An existing JIRA API key and credentials
    postconditions: |
      Possible to retrieve a set of issues for the selected JIRA project as passed as a param to the connector tools;
      This list only includes issues of the target project to be listed in results; 
      These must be real issues, and not simulated;
    function_to_run: !python/file 5-test_issue_retrieval.py

connector_references: 
  - description: "JIRA SVG logo"
    file_path: "assets/jira.svg"
    environment_path: "connectors/jira/jira.svg"
    format: "svg"
    required: true
    read_only: true

user_references: []

configs:
  - name: "jira_url"
    description: "The base URL of the JIRA instance, note this should be included as url in JIRAConnectorConfig"
    value: !env/var 

  - name: "jira_api_token"
    description: "API Token for authenticating with JIRA, note this should be included as api_token in JIRAConnectorConfig"
    value: !env/var 

  - name: "jira_email"
    description: "Email address for authenticating with JIRA, note this should be included as email in JIRAConnectorConfig"
    value: !env/var 

  - name: "jira_api_request_timeout"
    description: "Request timeout in seconds"
    value: 30

  - name: "jira_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the JIRA connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "JIRAConnectorConfig should dervice from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which projects are valid for the target, and then use the target to select which projects to actually pull data from for the respective tools as shown in the unit tests"
    ]
# !Jira