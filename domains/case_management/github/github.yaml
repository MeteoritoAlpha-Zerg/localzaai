# GitHub Issues
name: "github"
category: "Project Management"
description: "Create an API integration with GitHub Issues per its API specification"

specs:
  - description: |
      The GitHub Issues Connector is able to authenticate with GitHub per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The GitHub Issues connector is able to authenticate properly with GitHub;
      The GitHub Issues connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      GitHub Issues Connector is able to list GitHub repositories per user of get_query_target_options
    preconditions: |
      A valid authenticated session with GitHub
    postconditions: |
      Connector successfully enumerates repositories to populate the target options of the GitHubIssuesTarget;

  - description: |
      GitHub Issues Connector is able to list repository information
    preconditions: |
      A valid authenticated session with GitHub
    postconditions: |
      Per the configuration as contained in GitHubIssuesTarget as provided to GitHubIssuesConnectorTools, it is possible
      to get a list of repositories along with their respective description and other relevant repository details
      as may be relevant;
      Ensure that the respective get_github_repositories function in the GitHubIssuesConnectorTools is not hardcoding
      any return values;

  - description: |
      GitHub Issues Connector is able to list issues in a selected repository
    preconditions: |
      A valid authenticated session with GitHub
    postconditions: |
      Connector successfully lists issues for the selected repository provided as a param
      to the list issues tool

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates GitHub repositories
    preconditions: |
      An existing GitHub API token and credentials
    postconditions: |
      Possible to retrieve the list of GitHub repositories using get_query_target_options
      and to then use this to set the options in a given GitHubIssuesConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real repositories, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List GitHub repositories for selected repositories in target
    preconditions: |
      An existing GitHub API token and credentials
    postconditions: |
      Possible to retrieve the list of GitHub repositories by way of connector tools;
      This list includes details of the repositories to be listed in results; 
      These must be real repositories, and not simulated;
    function_to_run: !python/file 4-test_list_repositories.py

  - description: |
      Retrieve issues for selected GitHub repository passed as param
    preconditions: |
      An existing GitHub API token and credentials
    postconditions: |
      Possible to retrieve a set of issues for the selected GitHub repository as passed as a param to the connector tools;
      This list only includes issues of the target repository to be listed in results; 
      These must be real issues, and not simulated;
    function_to_run: !python/file 5-test_issue_retrieval.py

connector_references: 
  - description: "GitHub Issues SVG logo"
    file_path: "assets/github.svg"
    environment_path: "connectors/github/github.svg"
    format: "svg"
    required: true
    read_only: true

user_references: []

configs:
  - name: "github_api_url"
    description: "The base URL of the GitHub API, note this should be included as url in GitHubIssuesConnectorConfig"
    value: "https://api.github.com"

  - name: "github_access_token"
    description: "Personal Access Token for authenticating with GitHub, note this should be included as access_token in GitHubIssuesConnectorConfig"
    value: !env/var 

  - name: "github_api_request_timeout"
    description: "Request timeout in seconds"
    value: 30

  - name: "github_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "github_pagination_limit"
    description: "Maximum number of items to retrieve when paginating results"
    value: 100

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the GitHub Issues connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "GitHubIssuesConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which repositories are valid for the target, and then use the target to select which repositories to actually pull data from for the respective tools as shown in the unit tests",
      "consider GitHub's pagination and rate limiting when implementing API calls",
      "support both public and private repositories based on the access token's permissions",
      "handle GraphQL as well as REST API options where appropriate for performance",
      "respect GitHub API secondary rate limits by implementing proper backoff strategies"
    ]
# !GitHub Issues