async def test_vulnerability_retrieval(zerg_state=None):
    """Test ServiceNow vulnerability data retrieval"""
    print("Retrieving vulnerability data using ServiceNow connector")

    assert zerg_state, "this test requires valid zerg_state"

    servicenow_instance_url = zerg_state.get("servicenow_instance_url").get("value")
    servicenow_client_id = zerg_state.get("servicenow_client_id").get("value")
    servicenow_client_secret = zerg_state.get("servicenow_client_secret").get("value")

    from connectors.servicenow.config import ServiceNowConnectorConfig
    from connectors.servicenow.connector import ServiceNowConnector
    from connectors.servicenow.tools import ServiceNowConnectorTools
    from connectors.servicenow.target import ServiceNowTarget

    config = ServiceNowConnectorConfig(
        instance_url=servicenow_instance_url,
        client_id=servicenow_client_id,
        client_secret=SecretStr(servicenow_client_secret)
    )
    connector = ServiceNowConnector(config)

    connector_target = ServiceNowTarget(config=config)
    
    # Get connector tools
    tools = ServiceNowConnectorTools(
        servicenow_config=config, 
        target=ServiceNowTarget, 
        connector_display_name="ServiceNow"
    )
    
    # Try to query the vulnerability tables - different ServiceNow instances might use
    # different tables depending on installed apps
    vulnerability_tables = [
        "sn_vul_vulnerable_item", 
        "sn_vul_vulnerability", 
        "sn_vm_vulnerable_item",
        "vulnerability",
        "sn_val_vulnerability_response"
    ]
    
    vulnerabilities = []
    
    for table_name in vulnerability_tables:
        try:
            # Try to get records from each potential vulnerability table
            vuln_records = await tools.get_servicenow_records(table_name=table_name, limit=10)
            
            if vuln_records and len(vuln_records) > 0:
                print(f"Found vulnerability data in table: {table_name}")
                print(f"Retrieved {len(vuln_records)} vulnerability records")
                
                if not vulnerabilities:  # Only use the first successful table
                    vulnerabilities = vuln_records
                    
                # Check if vulnerability records have critical/high severity items
                high_severity = [v for v in vuln_records if 
                                    v.get('severity', '').lower() in ['critical', 'high'] or 
                                    v.get('risk', '').lower() in ['critical', 'high']]
                
                if high_severity:
                    print(f"Found {len(high_severity)} high severity vulnerabilities")
            
        except Exception as e:
            print(f"Could not retrieve data from {table_name}: {e}")
            continue
    
    if not vulnerabilities:
        print("Could not find vulnerability data in any expected tables")
        
        # Try to query the CMDB for servers with vulnerability-related fields
        try:
            cmdb_query = "asset_tagLIKEvulnerability^ORshort_descriptionLIKEvulnerability^ORattributesLIKEcve"
            cmdb_items = await tools.query_servicenow_records(
                table_name="cmdb_ci",
                query=cmdb_query
            )
            
            print(f"Found {len(cmdb_items)} CMDB items with potential vulnerability information")
            
            return True
        except Exception as e:
            print(f"Error querying CMDB for vulnerability data: {e}")
            return True
    
    return True