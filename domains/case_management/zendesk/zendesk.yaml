# Zendesk
name: "zendesk"
category: "Customer Support"
description: "Create an API integration with Zendesk per its API specification"

specs:
  - description: |
      The Zendesk Connector is able to authenticate with Zendesk per its implementation in the code 
      environment only
    preconditions: |
      This spec has no strict preconditions
    postconditions: |
      The Zendesk connector is able to authenticate properly with a Zendesk instance;
      The Zendesk connector config is of type ConnectorConfig and not AlertProviderConnectorConfig;

  - description: |
      Zendesk Connector is able to list Zendesk tickets per user of get_query_target_options
    preconditions: |
      A valid authenticated session with Zendesk
    postconditions: |
      Connector successfully enumerates tickets to populate the target options of the ZendeskTarget;

  - description: |
      Zendesk Connector is able to list ticket information
    preconditions: |
      A valid authenticated session with Zendesk
    postconditions: |
      Per the configuration as contained in ZendeskTarget as provided to ZendeskConnectorTools, it is possible
      to get a list of tickets along with their respective description and other relevant ticket details
      as may be relevant;
      Ensure that the respective get_zendesk_tickets function in the ZendeskConnectorTools is not hardcoding
      any return values;

  - description: |
      Zendesk Connector is able to retrieve details of a specific ticket
    preconditions: |
      A valid authenticated session with Zendesk
    postconditions: |
      Connector successfully retrieves detailed information for the selected ticket provided as a param
      to the get ticket details tool

tests:
  - description: |
      This checks to see that the connector is able to return a listing of tools
    preconditions: |
      A data connector implementation per the provided interfaces
    postconditions: |
      The data connector is able to provide a list of supported tools and interfaces
    function_to_run: !python/file 1-test_tools_interface.py

  - description: |
      This checks that the connector can successfully verify its connection
    preconditions: |
      A connector implementation adhering to ConnectorInterface is available as 'connector'
    postconditions: |
      The check_connection method returns True if the connector is correctly configured
    function_to_run: !python/file 2-test_connector_check_connection.py

  - description: |
      get_query_target_options enumerates Zendesk tickets
    preconditions: |
      An existing Zendesk API token and credentials
    postconditions: |
      Possible to retrieve the list of Zendesk tickets using get_query_target_options
      and to then use this to set the options in a given ZendeskConnectorConfig which is 
      subclassed from ConnectorConfig - adheres to example API response in query_target_options.py;
      These must be real tickets, and not simulated;
    function_to_run: !python/file 3-test_query_target_options.py

  - description: |
      List Zendesk tickets for selected Zendesk view in target
    preconditions: |
      An existing Zendesk API token and credentials
    postconditions: |
      Possible to retrieve the list of Zendesk tickets by way of connector tools;
      This list includes details of the tickets to be listed in results; 
      These must be real tickets, and not simulated;
    function_to_run: !python/file 4-test_list_tickets.py

  - description: |
      Retrieve details for a specific ticket passed as param
    preconditions: |
      An existing Zendesk API token and credentials
    postconditions: |
      Possible to retrieve detailed information for the selected Zendesk ticket as passed as a param to the connector tools;
      This should include all ticket details including comments if applicable;
      These must be real ticket details, and not simulated;
    function_to_run: !python/file 5-test_ticket_details.py

connector_references: 
  - description: "Zendesk SVG logo"
    file_path: "assets/zendesk.svg"
    environment_path: "connectors/zendesk/zendesk.svg"
    format: "svg"
    required: true
    read_only: true

user_references: []

configs:
  - name: "zendesk_subdomain"
    description: "Your Zendesk subdomain (e.g., for https://example.zendesk.com, enter 'example'), note this should be included as subdomain in ZendeskConnectorConfig"
    value: !env/var 

  - name: "zendesk_email"
    description: "Email address for authenticating with Zendesk, note this should be included as email in ZendeskConnectorConfig"
    value: !env/var 

  - name: "zendesk_api_token"
    description: "API Token for authenticating with Zendesk, note this should be included as api_token in ZendeskConnectorConfig"
    value: !env/var 

  - name: "zendesk_api_request_timeout"
    description: "Request timeout in seconds"
    value: 30

  - name: "zendesk_api_max_retries"
    description: "Number of times to retry API requests upon failure"
    value: 3

  - name: "additional considerations"
    description: |
      Additional considerations for the generation of specifically the Zendesk connector 
      with regards to the connector framework as provided - please keep these strongly in mind
    value: [
      "ZendeskConnectorConfig should derive from ConnectorConfig, this is not a connector of type AlertProviderConnectorConfig config",
      "authentication should not be a tool, tools should handle authentication when used (so should not be explicitly exposed)",
      "utilize the query target options to determine which tickets are valid for the target, and then use the target to select which tickets to actually pull data from for the respective tools as shown in the unit tests"
    ]
# !Zendesk